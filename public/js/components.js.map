{"version":3,"sources":["1-calendar.js","2-inputMask.js","3-modal.js","4-datepicker.js","5-donation.js","6-colorscheme.js","7-tabs.js"],"names":[],"mappingsvnnhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"components.js","sourcesContent":["var volunteer_count = 1;\r\nvalidateVolunteer = function(){\r\n    form = $(\".volunteer-form\");\r\n    var unique_url = form.data(\"unique_url\");\r\n    form.validate({\r\n        debug: true,\r\n        rules: {\r\n\r\n            email: {\r\n                required: true,\r\n                email: true,\r\n                remote: {\r\n                    url: unique_url,\r\n                    type: \"post\"\r\n                }\r\n            }\r\n        },\r\n        messages: {\r\n            email:{\r\n                remote: \"Email has been taken\"\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\ndeleteVolunteer = function(){\r\n    $(\".delete-volunteer\").click(function(){\r\n        var fieldset = $(this).closest(\"fieldset\");\r\n        fieldset.hide(\"fast\",function(){ fieldset.remove(); });\r\n        volunteerSubmitButton('delete_applicant');\r\n    });\r\n};\r\n\r\nvolunteerSubmitButton = function(type){\r\n    if(type == 'delete_applicant'){\r\n        var count_fieldset = $('.volunteer-fieldset').length -1;\r\n    }else{\r\n        var count_fieldset = $('.volunteer-fieldset').length;\r\n    }\r\n    \r\n    if(count_fieldset > 0 || $('#include_user').is(\":checked\")){\r\n        $('.volunteer-submit').attr('disabled',false);\r\n    }else{\r\n        $('.volunteer-submit').attr('disabled',true);\r\n    }\r\n}\r\ngenerateVolunteer = function(){\r\n    var add_volunteer = $(\"#add-volunteer\");\r\n    $.post(add_volunteer.data('post_url'),{event_id: add_volunteer.data(\"event_id\"),volunteer_group_id:add_volunteer.data(\"volunteer_group_id\"),count:volunteer_count,_token:\"f984f4re0t4oiwjo4\"}).done(\r\n        function(data){\r\n            add_volunteer.before(data);\r\n            var volunteer_name = $(\"#\"+add_volunteer.data('event_id')+\"-\"+volunteer_count+\"-name\");\r\n            $(\"#\"+add_volunteer.data(\"event_id\")+\"-\"+volunteer_count+\"-volunteer-fieldset\").show(\"fast\",function(){\r\n                volunteer_name.focus();\r\n            });\r\n            validateVolunteer();\r\n            deleteVolunteer();\r\n            volunteer_count++;\r\n            volunteerSubmitButton('add-volunteer');\r\n        }\r\n    );\r\n};\r\naddVolunteer = function(){\r\n    $(\"#add-volunteer\").click(function(){\r\n        generateVolunteer();\r\n    });\r\n};\r\n\r\napplyVolunteer = function(){\r\n    $(\".apply-volunteer\").click(function(){\r\n        $(\".volunteer-form-container\").show(\"fast\");\r\n        $(this).hide(\"fast\");\r\n    });\r\n    $(\".hide-apply-volunteer\").click(function(){\r\n        $(\".volunteer-form-container\").hide(\"fast\");\r\n        $(\".apply-volunteer\").show(\"fast\");\r\n    });\r\n\r\n};\r\nfunction isJson(str) {\r\n    try {\r\n        JSON.parse(str);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/////// C A L E N D A R U S E R\r\n\r\nloadEventDetails = function(event,token,dateClicked){\r\n    $.post($(\".calendar-modal\").data(\"event_modal_url\"),{id: event.id,slug:$(\"#event-modal\").data(\"slug\"),_token:token}).done(function(data){\r\n        $(\".calendar-modal .modal-content\").html(data);\r\n        $(\".calendar-modal\").modal();\r\n        applyVolunteer();\r\n        addVolunteer();\r\n        console.log(moment(event.end).format('YYYY-MM-DD'));\r\n        $('.past_date').val(moment(event.start).format('YYYY-MM-DD')+'/'+moment(event.end).format('YYYY-MM-DD')+'/'+event.count_);\r\n        $('.past_date_delete').val(moment(event.start).format('YYYY-MM-DD')+'/'+event.count_);\r\n        $('.occur_count').val(event.count_);\r\n        $('.occur_count2').attr('value',event.count_);\r\n        //console.log(event.count_ + '  count');\r\n\r\n        //$('.event_loop').val();\r\n        if(event.start != null){\r\n            $('#start').text(moment(event.start).format('M/D/YYYY h:mm A'));\r\n            $('#start_date_timezone').val(moment(event.start).format('M/D/YYYY h:mm A'));\r\n            $('#date_pass_current_start_date').val(moment(event.start).format('M/D/YYYY h:mm A'));\r\n            $('.occurrence').val(event.count_);\r\n\r\n            if(event.end == null){\r\n                $('#end').text(moment(event.start).format('M/D/YYYY'));\r\n                $('#end_date_timezone').val(moment(event.start).format('M/D/YYYY'));\r\n            }else{\r\n                $('#end').text(moment(event.end).format('M/D/YYYY h:mm A'));\r\n                $('#end_date_timezone').val(moment(event.end).format('M/D/YYYY h:mm A'));\r\n            }\r\n            if(event.volunteer_group_id != null){\r\n                $('#volunteer_group').attr('value',event.volunteer_group_id);\r\n            }\r\n            console.log(+'--------vg'+event.volunteer_group_id);\r\n        }\r\n\r\n        //hash\r\n        var newvalue= moment(event.start).format('YYYY-MM-DD')+'/'+moment(event.end).format('YYYY-MM-DD');\r\n        if(event.count_ == 0){\r\n            event.count_ = (event.count_+1);\r\n        }\r\n        var value = $('.js-edit-event-hash').attr('href',$('.js-edit-event-hash').attr('href') + '/instance/' + event.count_ + '#' + newvalue+'/'+event.count_);\r\n        // var value = $('.js-edit-event-hash_modify').attr('href',$('.js-edit-event-hash_modify').attr('href') + newvalue+'/'+event.count_);\r\n        var value = $('.js-edit-event-hash_modify').attr('href',$('.js-edit-event-hash_modify').attr('href') + '/instance/' + event.count_ + '#' + newvalue+'/'+event.count_);\r\n        //console.log(newvalue)(;\r\n        generateVolunteer();\r\n        validateVolunteer();\r\n\r\n        $(\"input[type=checkbox]\").click(function(){\r\n            if($(this).prop(\"checked\") == false){\r\n                $(\"#user_details\").hide(\"fast\");\r\n            }else{\r\n                $(\"#user_details\").show(\"fast\");\r\n            }\r\n        });\r\n\r\n        $('.volunteer-form').submit(function(e) {\r\n            e.preventDefault();\r\n            var volunteer_form = $(this);\r\n            if($(this).valid()){\r\n                $.post(volunteer_form.prop(\"action\"),volunteer_form.serialize()).done(function(data2){\r\n                    var string = data2;\r\n                    if(isJson(data2)){\r\n                        var check_output = jQuery.parseJSON(data2);\r\n                        var error_container = $(\".error-container\");\r\n                        error_container.html(\"\");\r\n                        $.each(check_output,function(index,item){\r\n                            error_html = \"<div class='alert alert-danger'> <a href='#' class='close' data-dismiss='alert' aria-label='close'>&times;</a>\"+item.value+\" - \"+item.message+\"</div>\";\r\n                            error_container.append(error_html);\r\n                        });\r\n                    }else{\r\n                        $(\".calendar-modal .modal-content\").html(string);\r\n                        applyVolunteer();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\naddEvent = function(start,end){\r\n    $.post($(\".calendar-modal-add\").data(\"event_modal\")).done(function(data){\r\n        $(\".calendar-modal-add .modal-content\").html(data);\r\n        $(\".calendar-modal-add\").modal();\r\n        $(\".start_date_modal\").val(moment(start).add(8,'hours').format('M/D/YYYY h:mm A'));\r\n        $(\".end_date_modal\").val(moment(end).subtract(1,'days').add(9,'hours').format('M/D/YYYY h:mm A'));\r\n\r\n    });\r\n};\r\n\r\n//recurring calendar\r\nfunction recurringEvent(calendar,calendar_events,token){\r\n    $.getScript('//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js',function(){\r\n        var arraySize = calendar_events.length;\r\n        var length = 1;\r\n        var date = new Date(calendar);\r\n        var d = date.getDate();\r\n        var m = date.getMonth();\r\n        var y = date.getFullYear();\r\n        var data = [];\r\n        calendar_events.forEach(function(result ){\r\n            var bg_color = \"#2874A6\";//blue as today's event\r\n            var text_color = \"#FFFFFF\";\r\n            //.console.log(date.getDate()+'----------------------------------------');\r\n            var start_date              = new Date(result.start_date);\r\n            var end_date                = new Date(result.end_date);\r\n            var modify_recurring_month  = result.modify_recurring_month;\r\n            var recurring_end_date      = new Date(result.recurring_end_date);\r\n            var current_date            = new Date();            //convert start date\r\n            var offset = new Date().getTimezoneOffset();\r\n            start_date = moment.utc(result.start_date);\r\n            start_date = new Date(start_date.utcOffset(offset * -1));\r\n\r\n            //convert end date\r\n            end_date = moment.utc(result.end_date);\r\n            end_date = new Date(end_date.utcOffset(offset * -1));\r\n\r\n            //convert modify_recurring_month date\r\n            //modify_recurring_month = moment.utc(result.modify_recurring_month);\r\n            //modify_recurring_month = new Date(modify_recurring_month.utcOffset(offset * -1));\r\n\r\n            //convert recurring_end_date date\r\n            recurring_end_date = moment.utc(result.recurring_end_date);\r\n            recurring_end_date = new Date(recurring_end_date.utcOffset(offset * -1));\r\n\r\n            var recurring = result.recurring;\r\n            var status = result.status;\r\n            var no_of_repetition = parseInt(result.no_of_repetition);\r\n            no_of_repetition = parseInt(no_of_repetition);\r\n            //console.log(no_of_repetition);\r\n\r\n            // //start date of the event. this is for pre-loaded events\r\n            var t = moment(start_date);\r\n            //see if an event is recurring\r\n            switch(result.recurring){\r\n                case '0'://once\r\n                case 0:\r\n                 //green as future event\r\n            if(moment(start_date).format(\"MM DD YYYY\") > moment(current_date).format(\"MM DD YYYY\")){\r\n                bg_color = \"#056E0E\";//green for future events\r\n                if(moment(start_date).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                    bg_color = \"#056E0E\";//green for future events\r\n                }\r\n                //console.log('future'+moment(start_date).format(\"MM DD YYYY\")+'-------'+moment(t).format(\"MM DD YYYY\"));\r\n            }\r\n            //set blue for date today\r\n            if(moment(start_date).format(\"MM DD YYYY\") == moment(current_date).format(\"MM DD YYYY\")){\r\n                bg_color = \"#2874A6\";//blue for today\r\n                if(moment(start_date).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                    bg_color = \"#056E0E\";//green for future events\r\n                }\r\n                //console.log('today'+moment(start_date).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n            }\r\n            //gray as past event\r\n            if(moment(start_date).format(\"MM DD YYYY\") < moment(current_date).format(\"MM DD YYYY\")){\r\n                bg_color = \"#C0C0C0\";//gray for past events\r\n                if(moment(start_date).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                    bg_color = \"#056E0E\";//green for future events\r\n                }\r\n                //console.log('past'+moment(start_date).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n            }\r\n                data.push({\r\n                    title: result.name,\r\n                    start: start_date,\r\n                    count_:0,\r\n                    end: end_date,\r\n                    color: bg_color,\r\n                    textColor: text_color,\r\n                    id: result.id,\r\n                    url: '/'//+result.id\r\n                });\r\n                break;\r\n                case '1'://weekly\r\n                case 1:\r\n                var i = no_of_repetition;//instance\r\n                var e = moment(recurring_end_date);//end date of recurring\r\n                var count = 1;\r\n                if(no_of_repetition > 0){\r\n                    e = moment(end_date).add((i*7),'days');\r\n                    i = 0;\r\n                }\r\n                    console.log(result.name+'---t: '+t+'----E: '+e);\r\n\r\n                for(var t; t<e; i+=7){\r\n\r\n                    var dn = new Date();\r\n                    var sd = moment(start_date).add(i,'days');\r\n                    var ed = moment(end_date).add(i,'days');\r\n                    t      = moment(ed).add(7, 'days');\r\n                    var d  = ed.diff(sd, 'days');\r\n                    //t      = moment(ed).add(d, 'days');\r\n                    //filter events to show\r\n                    var arr = modify_recurring_month.split(',');\r\n                    arr.splice(0,1);\r\n                       //set the color to future event\r\n                    if(moment(sd).format(\"MM DD YYYY\") > moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#056E0E\";//green for future events\r\n                        if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                        }\r\n                        //console.log('future'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(t).format(\"MM DD YYYY\"));\r\n                    }\r\n                    //set blue for date today\r\n                    if(moment(sd).format(\"MM DD YYYY\") == moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#2874A6\";//blue for today\r\n                        if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                        }\r\n                        //console.log('today'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n                    }\r\n                    //gray as past event\r\n                    if(moment(sd).format(\"MM DD YYYY\") < moment(current_date).format(\"MM DD YYYY\")){\r\n\r\n                        bg_color = \"#C0C0C0\";//gray for past events\r\n                        if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                        }\r\n                        //console.log('past'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n                    }\r\n                    if(arr.length == 0){\r\n                        data.push({\r\n                            title: result.name,\r\n                            count_:count,\r\n                            start: sd,\r\n                            end: ed,\r\n                            color: bg_color,\r\n                            textColor: text_color,\r\n                            id: result.id,\r\n                            url: '/'//+result.id\r\n                        });\r\n                    }else{\r\n\r\n                        if(arr.indexOf(moment(sd).format('YYYY-MM-DD').toString()) == -1){\r\n                            data.push({\r\n                                title: result.name,\r\n                                count_:count,\r\n                                start: sd,\r\n                                end: ed,\r\n                                color: bg_color,\r\n                                textColor: text_color,\r\n                                id: result.id,\r\n                                url: '/'+result.id\r\n                            });\r\n                        }\r\n                    }\r\n                    count ++;\r\n                    ////console.log(data);\r\n                }\r\n                    ////console.log(data);\r\n                break;\r\n                case '2'://monthly\r\n                case 2:\r\n                var count = 1;\r\n                var i = no_of_repetition;//instance\r\n                var e = moment(recurring_end_date);//end date of recurring\r\n                if(no_of_repetition > 0){\r\n                    e = moment(start_date).add(i,'months');\r\n                    i = 0;\r\n                }\r\n                //console.log(ee+\"----------\"+e);\r\n                for(var t; t<e; i++){\r\n                    //set the color to future event\r\n                    if(i > 0){\r\n                        bg_color = \"#056E0E\";\r\n                    }\r\n                    var dn = new Date();\r\n                    var sd = moment(start_date).add(i,'months');\r\n                    var ed = moment(end_date).add(i,'months');\r\n                    t      = moment(ed).add(1, 'months');\r\n                    //filter events to show\r\n                    var arr = modify_recurring_month.split(',');\r\n                    arr.splice(0,1);\r\n                       //set the color to future event\r\n                    if(moment(sd).format(\"MM DD YYYY\") > moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#056E0E\";//green for future events\r\n                        if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                }\r\n                        //console.log('future'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(t).format(\"MM DD YYYY\"));\r\n                    }\r\n                    //set blue for date today\r\n                    if(moment(sd).format(\"MM DD YYYY\") == moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#2874A6\";//blue for today\r\n                        if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                }\r\n                        //console.log('today'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n                    }\r\n                    //gray as past event\r\n                    if(moment(sd).format(\"MM DD YYYY\") < moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#C0C0C0\";//gray for past events\r\n                         if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                        }\r\n                      //  console.log('past'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n                    }\r\n                    if(arr.length == 0){\r\n                        data.push({\r\n                            title: result.name,\r\n                            count_:count,\r\n                            start: sd,\r\n                            end: ed,\r\n                            color: bg_color,\r\n                            textColor: text_color,\r\n                            id: result.id,\r\n                            url: '/'+result.id\r\n                        });\r\n                    }else{\r\n                        if(arr.indexOf(moment(sd).format('YYYY-MM-DD').toString()) == -1){\r\n                            data.push({\r\n                                title: result.name,\r\n                                count_:count,\r\n                                start: sd,\r\n                                end: ed,\r\n                                color: bg_color,\r\n                                textColor: text_color,\r\n                                id: result.id,\r\n                                url: '/'+result.id\r\n                            });\r\n                        }\r\n                    }\r\n                    count ++;\r\n                    ////console.log(data);\r\n                }\r\n                break;\r\n                case '3'://yearly\r\n                case 3:\r\n                var count = 1;\r\n                var i = no_of_repetition;//instance\r\n                var e = moment(recurring_end_date);//end date of recurring\r\n                if(no_of_repetition > 0){\r\n                    e = moment(start_date).add((i*12),'months');\r\n                    i = 0;\r\n                }\r\n                for(var t; t<e; i+=12){\r\n                    //set the color to future event\r\n                    if(i > 0){\r\n                        bg_color = \"#056E0E\";\r\n                    }\r\n                    var dn = new Date();\r\n                    var sd = moment(start_date).add(i,'months');\r\n                    var ed = moment(end_date).add(i,'months');\r\n                    if(no_of_repetition > 0){\r\n                    t      = moment(ed).add(12,'months');\r\n                    }else{\r\n                    t      = moment(ed).add(12,'months');                        \r\n                    }\r\n                    //var diff = moment(result.end_date).diff(result.start_date, 'days');//get date days diff\r\n                   //filter events to show\r\n\r\n                    var arr = modify_recurring_month.split(',');\r\n                    arr.splice(0,1);\r\n                    //console.log(arr+ start_date);\r\n                       //set the color to future event\r\n                    if(moment(sd).format(\"MM DD YYYY\") > moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#056E0E\";//green for future events\r\n                        //console.log('future'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(t).format(\"MM DD YYYY\"));\r\n                    }\r\n                    //set blue for date today\r\n                    if(moment(sd).format(\"MM DD YYYY\") == moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#2874A6\";//blue for today\r\n                        //console.log('today'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n                    }\r\n                    //gray as past event\r\n                    if(moment(sd).format(\"MM DD YYYY\") < moment(current_date).format(\"MM DD YYYY\")){\r\n                        bg_color = \"#C0C0C0\";//gray for past events\r\n                        if(moment(sd).format(\"YYYY\") > moment(current_date).format(\"YYYY\")){\r\n                             bg_color = \"#056E0E\";//green for future events\r\n                        }\r\n                        //console.log('past'+moment(sd).format(\"MM DD YYYY\")+'-------'+moment(current_date).format(\"MM DD YYYY\"));\r\n\r\n                    }\r\n                    if(arr.length == 0){\r\n                        data.push({\r\n                            title: result.name,\r\n                            count_:count,\r\n                            start: sd,\r\n                            end: ed,\r\n                            color: bg_color,\r\n                            textColor: text_color,\r\n                            id: result.id,\r\n                            url: '/'+result.id\r\n                        });\r\n                    }else{\r\n                        if(arr.indexOf(moment(sd).format('YYYY-MM-DD').toString()) == -1){\r\n                            data.push({\r\n                                title: result.name,\r\n                                count_:count,\r\n                                start: sd,\r\n                                end: ed,\r\n                                color: bg_color,\r\n                                textColor: text_color,\r\n                                id: result.id,\r\n                                url: '/'+result.id\r\n                            });\r\n                        }\r\n                    }\r\n                    count ++;\r\n                    //console.log(sd.format(\"MM DD YYYY\") +\"---\"+ed.format(\"MM DD YYYY\")+\"---\"+moment(result.end_date).add('days',ed).format(\"MM DD YYYY\"));\r\n                }\r\n                break;\r\n            }\r\n\r\n        });\r\n\r\n        if(length == arraySize || length == 1){\r\n            $(calendar).fullCalendar({\r\n                header: {\r\n                    left: 'prevYear,nextYear,today',\r\n                    center: 'prev,title,next',\r\n                    right: 'month,agendaWeek,agendaDay,listMonth'\r\n                },\r\n                navLinks: true, // can click day/week names to navigate views\r\n                eventLimit: true, // allow \"more\" link when too many events\r\n                slotEventOverlap: true,\r\n                eventOverlap:true,\r\n                resourceEventOverlap:true,\r\n                selectOverlap:true,//overlap select\r\n                overlap: true,\r\n                fixedWeekCount: false,\r\n                selectable: true,\r\n                selectHelper: true,\r\n                events: data,\r\n                eventClick: function(event, jsEvent, view) {\r\n                    // get and convert to date startdate\r\n                    var startdate = new Date(event.start._d);\r\n                    var newstartdate = startdate.getFullYear() + \"-\" + startdate.getMonth() + \"-\" + startdate.getDay();\r\n                    loadEventDetails(event, token,'' + newstartdate);\r\n                    if(event.url){\r\n                            return false;\r\n                    }\r\n                },\r\n                select: function(start, end) {\r\n                    // var title = prompt('Event Title:');\r\n                    // var eventData;\r\n                    // if (title) {\r\n                    //  eventData = {\r\n                    //      title: title,\r\n                    //      start: start,\r\n                    //      end: end\r\n                    //  };\r\n                    //  $(calendar).fullCalendar('renderEvent', eventData, true); // stick? = true\r\n                    // }\r\n                    // $(calendar).fullCalendar('unselect');\r\n                    //format end date\r\n\r\n                    //console.log(moment(end).format('M/D/YYYY')+'----------------------------------');\r\n                    addEvent(start,end);\r\n                    return false;\r\n                },\r\n                buttonText: {\r\n                    today: 'Today',\r\n                    month: 'Month',\r\n                    week: 'Week',\r\n                    day: 'Day',\r\n                    list: 'List'\r\n                }\r\n            });\r\n        }else{\r\n            length++;\r\n            // /console.log(length);\r\n        }\r\n    });\r\n}\r\nfunction singleEvent(calendar,calendar_events,token) {\r\n    $.getScript('//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.1.0/fullcalendar.min.js',function(){\r\n        var date = new Date();\r\n        var d = date.getDate();\r\n        var m = date.getMonth();\r\n        var y = date.getFullYear();\r\n        var data = [];\r\n        calendar_events.forEach(function(result){\r\n            var text_color = \"#FFFFFF\";\r\n            var start_date =  new Date(result.start_date);\r\n            var end_date = new Date(result.end_date);\r\n            //convert start date\r\n            var offset = new Date().getTimezoneOffset();\r\n            var new_start_date = moment.utc(result.start_date);\r\n            var converted_start_date = new Date(new_start_date.utcOffset(offset * -1));\r\n            //convert end date\r\n            var new_end_date = moment.utc(result.end_date);\r\n            var converted_end_date = new Date(new_end_date.utcOffset(offset * -1));\r\n            var current_date = new Date();\r\n            var bg_color = \"#2874A6\";//blue as today's event\r\n            //green as future event\r\n            if(moment(current_date).format(\"MM DD YYYY\") < moment(converted_start_date).format(\"MM DD YYYY\")){\r\n                bg_color = \"#056E0E\";\r\n            }\r\n            //gray as past event\r\n            if(current_date > converted_end_date){\r\n                bg_color = \"#C0C0C0\";\r\n            }\r\n            if(converted_start_date ){\r\n                data.push({\r\n                    title: result.name,\r\n                    start: converted_start_date,\r\n                    end: converted_end_date,\r\n                    color: bg_color,\r\n                    textColor: text_color,\r\n                    id: result.id,\r\n                    url: '/'+result.id\r\n\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        $(calendar).fullCalendar({\r\n            header: {\r\n                left: 'prevYear,nextYear,today',\r\n                center: 'prev,title,next',\r\n                right: 'month,agendaWeek,agendaDay,listMonth'\r\n            },\r\n            navLinks: true, // can click day/week names to navigate views\r\n            eventLimit: true, // allow \"more\" link when too many events\r\n            slotEventOverlap: false,\r\n            eventOverlap:false,\r\n            selectOverlap:false,\r\n            overlap: false,\r\n            fixedWeekCount: false,\r\n            allDay: true,\r\n            events: data,\r\n            eventClick: function(event) {\r\n                if (event.url) {\r\n                    loadEventDetails(event, token,0);\r\n                    return false;\r\n                }\r\n            },\r\n            buttonText: {\r\n                today: 'Today',\r\n                month: 'Month',\r\n                week: 'Week',\r\n                day: 'Day',\r\n                list: 'List'\r\n            }\r\n        });\r\n    });\r\n}\r\n","$(document).ready(function(){/**\r\n* @license Input Mask plugin for jquery\r\n* http://github.com/RobinHerbots/jquery.inputmask\r\n* Copyright (c) 2010 - 2013 Robin Herbots\r\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\r\n* Version: 0.0.0\r\n*/\r\n\r\n(function ($) {\r\n    if ($.fn.inputmask === undefined) {\r\n        $.inputmask = {\r\n            //options default\r\n            defaults: {\r\n                placeholder: \"_\",\r\n                optionalmarker: { start: \"[\", end: \"]\" },\r\n                quantifiermarker: { start: \"{\", end: \"}\" },\r\n                groupmarker: { start: \"(\", end: \")\" },\r\n                escapeChar: \"\\\\\",\r\n                mask: null,\r\n                oncomplete: $.noop, //executes when the mask is complete\r\n                onincomplete: $.noop, //executes when the mask is incomplete and focus is lost\r\n                oncleared: $.noop, //executes when the mask is cleared\r\n                repeat: 0, //repetitions of the mask: * ~ forever, otherwise specify an integer\r\n                greedy: true, //true: allocated buffer for the mask and repetitions - false: allocate only if needed\r\n                autoUnmask: false, //automatically unmask when retrieving the value with $.fn.val or value if the browser supports __lookupGetter__ or getOwnPropertyDescriptor\r\n                clearMaskOnLostFocus: true,\r\n                insertMode: true, //insert the input or overwrite the input\r\n                clearIncomplete: false, //clear the incomplete input on blur\r\n                aliases: {}, //aliases definitions => see jquery.inputmask.extensions.js\r\n                onKeyUp: $.noop, //override to implement autocomplete on certain keys for example\r\n                onKeyDown: $.noop, //override to implement autocomplete on certain keys for example\r\n                showMaskOnFocus: true, //show the mask-placeholder when the input has focus\r\n                showMaskOnHover: true, //show the mask-placeholder when hovering the empty input\r\n                onKeyValidation: $.noop, //executes on every key-press with the result of isValid. Params: result, opts\r\n                skipOptionalPartCharacter: \" \", //a character which can be used to skip an optional part of a mask\r\n                showTooltip: false, //show the activemask as tooltip\r\n                numericInput: false, //numericInput input direction style (input shifts to the left while holding the caret position)\r\n                //numeric basic properties\r\n                isNumeric: false, //enable numeric features\r\n                radixPoint: \"\", //\".\", // | \",\"\r\n                skipRadixDance: false, //disable radixpoint caret positioning\r\n                rightAlignNumerics: true, //align numerics to the right\r\n                //numeric basic properties\r\n                definitions: {\r\n                    '9': {\r\n                        validator: \"[0-9]\",\r\n                        cardinality: 1\r\n                    },\r\n                    'a': {\r\n                        validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u0451]\",\r\n                        cardinality: 1\r\n                    },\r\n                    '*': {\r\n                        validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u04510-9]\",\r\n                        cardinality: 1\r\n                    }\r\n                },\r\n                keyCode: {\r\n                    ALT: 18, BACKSPACE: 8, CAPS_LOCK: 20, COMMA: 188, COMMAND: 91, COMMAND_LEFT: 91, COMMAND_RIGHT: 93, CONTROL: 17, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, INSERT: 45, LEFT: 37, MENU: 93, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108,\r\n                    NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SHIFT: 16, SPACE: 32, TAB: 9, UP: 38, WINDOWS: 91\r\n                },\r\n                //specify keycodes which should not be considered in the keypress event, otherwise the preventDefault will stop their default behavior especially in FF\r\n                ignorables: [8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123],\r\n                getMaskLength: function (buffer, greedy, repeat, currentBuffer, opts) {\r\n                    var calculatedLength = buffer.length;\r\n                    if (!greedy) {\r\n                        if (repeat == \"*\") {\r\n                            calculatedLength = currentBuffer.length + 1;\r\n                        } else if (repeat > 1) {\r\n                            calculatedLength += (buffer.length * (repeat - 1));\r\n                        }\r\n                    }\r\n                    return calculatedLength;\r\n                }\r\n            },\r\n            escapeRegex: function (str) {\r\n                var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\r\n                return str.replace(new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'gim'), '\\\\$1');\r\n            }\r\n        };\r\n\r\n        $.fn.inputmask = function (fn, options) {\r\n            var opts = $.extend(true, {}, $.inputmask.defaults, options),\r\n                msie10 = navigator.userAgent.match(new RegExp(\"msie 10\", \"i\")) !== null,\r\n                iphone = navigator.userAgent.match(new RegExp(\"iphone\", \"i\")) !== null,\r\n                android = navigator.userAgent.match(new RegExp(\"android.*safari.*\", \"i\")) !== null,\r\n                androidchrome = navigator.userAgent.match(new RegExp(\"android.*chrome.*\", \"i\")) !== null,\r\n                pasteEvent = isInputEventSupported('paste') && !msie10 ? 'paste' : isInputEventSupported('input') ? 'input' : \"propertychange\",\r\n                masksets,\r\n                activeMasksetIndex = 0;\r\n\r\n            if (typeof fn === \"string\") {\r\n                switch (fn) {\r\n                    case \"mask\":\r\n                        //resolve possible aliases given by options\r\n                        resolveAlias(opts.alias, options);\r\n                        masksets = generateMaskSets();\r\n                        if (masksets.length == 0) { return this; }\r\n\r\n                        return this.each(function () {\r\n                            maskScope($.extend(true, {}, masksets), 0).mask(this);\r\n                        });\r\n                    case \"unmaskedvalue\":\r\n                        var $input = $(this), input = this;\r\n                        if ($input.data('_inputmask')) {\r\n                            masksets = $input.data('_inputmask')['masksets'];\r\n                            activeMasksetIndex = $input.data('_inputmask')['activeMasksetIndex'];\r\n                            opts = $input.data('_inputmask')['opts'];\r\n                            return maskScope(masksets, activeMasksetIndex).unmaskedvalue($input);\r\n                        } else return $input.val();\r\n                    case \"remove\":\r\n                        return this.each(function () {\r\n                            var $input = $(this), input = this;\r\n                            if ($input.data('_inputmask')) {\r\n                                masksets = $input.data('_inputmask')['masksets'];\r\n                                activeMasksetIndex = $input.data('_inputmask')['activeMasksetIndex'];\r\n                                opts = $input.data('_inputmask')['opts'];\r\n                                //writeout the unmaskedvalue\r\n                                input._valueSet(maskScope(masksets, activeMasksetIndex).unmaskedvalue($input, true));\r\n                                //clear data\r\n                                $input.removeData('_inputmask');\r\n                                //unbind all events\r\n                                $input.unbind(\".inputmask\");\r\n                                $input.removeClass('focus.inputmask');\r\n                                //restore the value property\r\n                                var valueProperty;\r\n                                if (Object.getOwnPropertyDescriptor)\r\n                                    valueProperty = Object.getOwnPropertyDescriptor(input, \"value\");\r\n                                if (valueProperty && valueProperty.get) {\r\n                                    if (input._valueGet) {\r\n                                        Object.defineProperty(input, \"value\", {\r\n                                            get: input._valueGet,\r\n                                            set: input._valueSet\r\n                                        });\r\n                                    }\r\n                                } else if (document.__lookupGetter__ && input.__lookupGetter__(\"value\")) {\r\n                                    if (input._valueGet) {\r\n                                        input.__defineGetter__(\"value\", input._valueGet);\r\n                                        input.__defineSetter__(\"value\", input._valueSet);\r\n                                    }\r\n                                }\r\n                                try { //try catch needed for IE7 as it does not supports deleting fns\r\n                                    delete input._valueGet;\r\n                                    delete input._valueSet;\r\n                                } catch (e) {\r\n                                    input._valueGet = undefined;\r\n                                    input._valueSet = undefined;\r\n\r\n                                }\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"getemptymask\": //return the default (empty) mask value, usefull for setting the default value in validation\r\n                        if (this.data('_inputmask')) {\r\n                            masksets = this.data('_inputmask')['masksets'];\r\n                            activeMasksetIndex = this.data('_inputmask')['activeMasksetIndex'];\r\n                            return masksets[activeMasksetIndex]['_buffer'].join('');\r\n                        }\r\n                        else return \"\";\r\n                    case \"hasMaskedValue\": //check wheter the returned value is masked or not; currently only works reliable when using jquery.val fn to retrieve the value\r\n                        return this.data('_inputmask') ? !this.data('_inputmask')['opts'].autoUnmask : false;\r\n                    case \"isComplete\":\r\n                        masksets = this.data('_inputmask')['masksets'];\r\n                        activeMasksetIndex = this.data('_inputmask')['activeMasksetIndex'];\r\n                        opts = this.data('_inputmask')['opts'];\r\n                        return maskScope(masksets, activeMasksetIndex).isComplete(this[0]._valueGet().split(''));\r\n                    case \"getmetadata\": //return mask metadata if exists\r\n                        if (this.data('_inputmask')) {\r\n                            masksets = this.data('_inputmask')['masksets'];\r\n                            activeMasksetIndex = this.data('_inputmask')['activeMasksetIndex'];\r\n                            return masksets[activeMasksetIndex]['metadata'];\r\n                        }\r\n                        else return undefined;\r\n                    default:\r\n                        //check if the fn is an alias\r\n                        if (!resolveAlias(fn, options)) {\r\n                            //maybe fn is a mask so we try\r\n                            //set mask\r\n                            opts.mask = fn;\r\n                        }\r\n                        masksets = generateMaskSets();\r\n                        if (masksets.length == 0) { return this; }\r\n                        return this.each(function () {\r\n                            maskScope($.extend(true, {}, masksets), activeMasksetIndex).mask(this);\r\n                        });\r\n\r\n                        break;\r\n                }\r\n            } else if (typeof fn == \"object\") {\r\n                opts = $.extend(true, {}, $.inputmask.defaults, fn);\r\n\r\n                resolveAlias(opts.alias, fn); //resolve aliases\r\n                masksets = generateMaskSets();\r\n                if (masksets.length == 0) { return this; }\r\n                return this.each(function () {\r\n                    maskScope($.extend(true, {}, masksets), activeMasksetIndex).mask(this);\r\n                });\r\n            } else if (fn == undefined) {\r\n                //look for data-inputmask atribute - the attribute should only contain optipns\r\n                return this.each(function () {\r\n                    var attrOptions = $(this).attr(\"data-inputmask\");\r\n                    if (attrOptions && attrOptions != \"\") {\r\n                        try {\r\n                            attrOptions = attrOptions.replace(new RegExp(\"'\", \"g\"), '\"');\r\n                            var dataoptions = $.parseJSON(\"{\" + attrOptions + \"}\");\r\n                            $.extend(true, dataoptions, options);\r\n                            opts = $.extend(true, {}, $.inputmask.defaults, dataoptions);\r\n                            resolveAlias(opts.alias, dataoptions);\r\n                            opts.alias = undefined;\r\n                            $(this).inputmask(opts);\r\n                        } catch (ex) { } //need a more relax parseJSON\r\n                    }\r\n                });\r\n            }\r\n\r\n            //helper functions\r\n            function isInputEventSupported(eventName) {\r\n                var el = document.createElement('input'),\r\n                eventName = 'on' + eventName,\r\n                isSupported = (eventName in el);\r\n                if (!isSupported) {\r\n                    el.setAttribute(eventName, 'return;');\r\n                    isSupported = typeof el[eventName] == 'function';\r\n                }\r\n                el = null;\r\n                return isSupported;\r\n            }\r\n            function resolveAlias(aliasStr, options) {\r\n                var aliasDefinition = opts.aliases[aliasStr];\r\n                if (aliasDefinition) {\r\n                    if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias); //alias is another alias\r\n                    $.extend(true, opts, aliasDefinition);  //merge alias definition in the options\r\n                    $.extend(true, opts, options);  //reapply extra given options\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            function getMaskTemplate(mask) {\r\n                if (opts.numericInput) {\r\n                    mask = mask.split('').reverse().join('');\r\n                }\r\n                var escaped = false, outCount = 0, greedy = opts.greedy, repeat = opts.repeat;\r\n                if (repeat == \"*\") greedy = false;\r\n                //if (greedy == true && opts.placeholder == \"\") opts.placeholder = \" \";\r\n                if (mask.length == 1 && greedy == false && repeat != 0) { opts.placeholder = \"\"; } //hide placeholder with single non-greedy mask\r\n                var singleMask = $.map(mask.split(\"\"), function (element, index) {\r\n                    var outElem = [];\r\n                    if (element == opts.escapeChar) {\r\n                        escaped = true;\r\n                    }\r\n                    else if ((element != opts.optionalmarker.start && element != opts.optionalmarker.end) || escaped) {\r\n                        var maskdef = opts.definitions[element];\r\n                        if (maskdef && !escaped) {\r\n                            for (var i = 0; i < maskdef.cardinality; i++) {\r\n                                outElem.push(getPlaceHolder(outCount + i));\r\n                            }\r\n                        } else {\r\n                            outElem.push(element);\r\n                            escaped = false;\r\n                        }\r\n                        outCount += outElem.length;\r\n                        return outElem;\r\n                    }\r\n                });\r\n\r\n                //allocate repetitions\r\n                var repeatedMask = singleMask.slice();\r\n                for (var i = 1; i < repeat && greedy; i++) {\r\n                    repeatedMask = repeatedMask.concat(singleMask.slice());\r\n                }\r\n\r\n                return { \"mask\": repeatedMask, \"repeat\": repeat, \"greedy\": greedy };\r\n            }\r\n            //test definition => {fn: RegExp/function, cardinality: int, optionality: bool, newBlockMarker: bool, offset: int, casing: null/upper/lower, def: definitionSymbol}\r\n            function getTestingChain(mask) {\r\n                if (opts.numericInput) {\r\n                    mask = mask.split('').reverse().join('');\r\n                }\r\n                var isOptional = false, escaped = false;\r\n                var newBlockMarker = false; //indicates wheter the begin/ending of a block should be indicated\r\n\r\n                return $.map(mask.split(\"\"), function (element, index) {\r\n                    var outElem = [];\r\n\r\n                    if (element == opts.escapeChar) {\r\n                        escaped = true;\r\n                    } else if (element == opts.optionalmarker.start && !escaped) {\r\n                        isOptional = true;\r\n                        newBlockMarker = true;\r\n                    }\r\n                    else if (element == opts.optionalmarker.end && !escaped) {\r\n                        isOptional = false;\r\n                        newBlockMarker = true;\r\n                    }\r\n                    else {\r\n                        var maskdef = opts.definitions[element];\r\n                        if (maskdef && !escaped) {\r\n                            var prevalidators = maskdef[\"prevalidator\"], prevalidatorsL = prevalidators ? prevalidators.length : 0;\r\n                            for (var i = 1; i < maskdef.cardinality; i++) {\r\n                                var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [], validator = prevalidator[\"validator\"], cardinality = prevalidator[\"cardinality\"];\r\n                                outElem.push({ fn: validator ? typeof validator == 'string' ? new RegExp(validator) : new function () { this.test = validator; } : new RegExp(\".\"), cardinality: cardinality ? cardinality : 1, optionality: isOptional, newBlockMarker: isOptional == true ? newBlockMarker : false, offset: 0, casing: maskdef[\"casing\"], def: maskdef[\"definitionSymbol\"] || element });\r\n                                if (isOptional == true) //reset newBlockMarker\r\n                                    newBlockMarker = false;\r\n                            }\r\n                            outElem.push({ fn: maskdef.validator ? typeof maskdef.validator == 'string' ? new RegExp(maskdef.validator) : new function () { this.test = maskdef.validator; } : new RegExp(\".\"), cardinality: maskdef.cardinality, optionality: isOptional, newBlockMarker: newBlockMarker, offset: 0, casing: maskdef[\"casing\"], def: maskdef[\"definitionSymbol\"] || element });\r\n                        } else {\r\n                            outElem.push({ fn: null, cardinality: 0, optionality: isOptional, newBlockMarker: newBlockMarker, offset: 0, casing: null, def: element });\r\n                            escaped = false;\r\n                        }\r\n                        //reset newBlockMarker\r\n                        newBlockMarker = false;\r\n                        return outElem;\r\n                    }\r\n                });\r\n            }\r\n            function generateMaskSets() {\r\n                var ms = [];\r\n                var genmasks = []; //used to keep track of the masks that where processed, to avoid duplicates\r\n                var maskTokens = [];\r\n                function analyseMask(mask) { //just an idea - not in use for the moment\r\n                    var tokenizer = /(?:[?*+]|\\{[0-9]+(?:,[0-9]*)?\\})\\??|[^.?*+^${[]()|\\\\]+|./g;\r\n                    function maskToken() {\r\n                        this.matches = [];\r\n                        this.isGroup = false;\r\n                        this.isOptional = false;\r\n                        this.isQuantifier = false;\r\n                    };\r\n                    var currentToken = new maskToken(),\r\n                        match, m, openenings = [];\r\n\r\n                    maskTokens = [];\r\n\r\n                    while (match = tokenizer.exec(mask)) {\r\n                        m = match[0];\r\n                        switch (m.charAt(0)) {\r\n                            case opts.optionalmarker.end:\r\n                                // optional closing\r\n                            case opts.groupmarker.end:\r\n                                // Group closing\r\n                                var openingToken = openenings.pop();\r\n                                if (openenings.length > 0) {\r\n                                    openenings[openenings.length - 1][\"matches\"].push(openingToken);\r\n                                } else {\r\n                                    maskTokens.push(openingToken);\r\n                                    currentToken = openingToken; //new maskToken();\r\n                                }\r\n                                break;\r\n                            case opts.optionalmarker.start:\r\n                                // optional opening\r\n                                if (!currentToken.isGroup && currentToken.matches.length > 0)\r\n                                    maskTokens.push(currentToken);\r\n                                currentToken = new maskToken();\r\n                                currentToken.isOptional = true;\r\n                                openenings.push(currentToken);\r\n                                break;\r\n                            case opts.groupmarker.start:\r\n                                // Group opening\r\n                                if (!currentToken.isGroup && currentToken.matches.length > 0)\r\n                                    maskTokens.push(currentToken);\r\n                                currentToken = new maskToken();\r\n                                currentToken.isGroup = true;\r\n                                openenings.push(currentToken);\r\n                                break;\r\n                            case opts.quantifiermarker.start:\r\n                                //Quantifier\r\n                                var quantifier = new maskToken();\r\n                                quantifier.isQuantifier = true;\r\n                                quantifier.matches.push(m);\r\n                                if (openenings.length > 0) {\r\n                                    openenings[openenings.length - 1][\"matches\"].push(quantifier);\r\n                                } else {\r\n                                    currentToken.matches.push(quantifier);\r\n                                }\r\n                                break;\r\n                            default:\r\n                                if (openenings.length > 0) {\r\n                                    openenings[openenings.length - 1][\"matches\"].push(m);\r\n                                } else {\r\n                                    if (currentToken.isGroup || currentToken.isOptional)\r\n                                        currentToken = new maskToken();\r\n                                    currentToken.matches.push(m);\r\n                                }\r\n                        }\r\n                    }\r\n\r\n                    if (currentToken.matches.length > 0)\r\n                        maskTokens.push(currentToken);\r\n\r\n                    return maskTokens;\r\n                }\r\n\r\n                function markOptional(maskPart) { //needed for the clearOptionalTail functionality\r\n                    return opts.optionalmarker.start + maskPart + opts.optionalmarker.end;\r\n                }\r\n                function splitFirstOptionalEndPart(maskPart) {\r\n                    var optionalStartMarkers = 0, optionalEndMarkers = 0, mpl = maskPart.length;\r\n                    for (i = 0; i < mpl; i++) {\r\n                        if (maskPart.charAt(i) == opts.optionalmarker.start) {\r\n                            optionalStartMarkers++;\r\n                        }\r\n                        if (maskPart.charAt(i) == opts.optionalmarker.end) {\r\n                            optionalEndMarkers++;\r\n                        }\r\n                        if (optionalStartMarkers > 0 && optionalStartMarkers == optionalEndMarkers)\r\n                            break;\r\n                    }\r\n                    var maskParts = [maskPart.substring(0, i)];\r\n                    if (i < mpl) {\r\n                        maskParts.push(maskPart.substring(i + 1, mpl));\r\n                    }\r\n                    return maskParts;\r\n                }\r\n                function splitFirstOptionalStartPart(maskPart) {\r\n                    var mpl = maskPart.length;\r\n                    for (i = 0; i < mpl; i++) {\r\n                        if (maskPart.charAt(i) == opts.optionalmarker.start) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    var maskParts = [maskPart.substring(0, i)];\r\n                    if (i < mpl) {\r\n                        maskParts.push(maskPart.substring(i + 1, mpl));\r\n                    }\r\n                    return maskParts;\r\n                }\r\n                function generateMask(maskPrefix, maskPart, metadata) {\r\n                    var maskParts = splitFirstOptionalEndPart(maskPart);\r\n                    var newMask, maskTemplate;\r\n\r\n                    var masks = splitFirstOptionalStartPart(maskParts[0]);\r\n                    if (masks.length > 1) {\r\n                        newMask = maskPrefix + masks[0] + markOptional(masks[1]) + (maskParts.length > 1 ? maskParts[1] : \"\");\r\n                        if ($.inArray(newMask, genmasks) == -1 && newMask != \"\") {\r\n                            genmasks.push(newMask);\r\n                            maskTemplate = getMaskTemplate(newMask);\r\n                            ms.push({\r\n                                \"mask\": newMask,\r\n                                \"_buffer\": maskTemplate[\"mask\"],\r\n                                \"buffer\": maskTemplate[\"mask\"].slice(),\r\n                                \"tests\": getTestingChain(newMask),\r\n                                \"lastValidPosition\": -1,\r\n                                \"greedy\": maskTemplate[\"greedy\"],\r\n                                \"repeat\": maskTemplate[\"repeat\"],\r\n                                \"metadata\": metadata\r\n                            });\r\n                        }\r\n                        newMask = maskPrefix + masks[0] + (maskParts.length > 1 ? maskParts[1] : \"\");\r\n                        if ($.inArray(newMask, genmasks) == -1 && newMask != \"\") {\r\n                            genmasks.push(newMask);\r\n                            maskTemplate = getMaskTemplate(newMask);\r\n                            ms.push({\r\n                                \"mask\": newMask,\r\n                                \"_buffer\": maskTemplate[\"mask\"],\r\n                                \"buffer\": maskTemplate[\"mask\"].slice(),\r\n                                \"tests\": getTestingChain(newMask),\r\n                                \"lastValidPosition\": -1,\r\n                                \"greedy\": maskTemplate[\"greedy\"],\r\n                                \"repeat\": maskTemplate[\"repeat\"],\r\n                                \"metadata\": metadata\r\n                            });\r\n                        }\r\n                        if (splitFirstOptionalStartPart(masks[1]).length > 1) { //optional contains another optional\r\n                            generateMask(maskPrefix + masks[0], masks[1] + maskParts[1], metadata);\r\n                        }\r\n                        if (maskParts.length > 1 && splitFirstOptionalStartPart(maskParts[1]).length > 1) {\r\n                            generateMask(maskPrefix + masks[0] + markOptional(masks[1]), maskParts[1], metadata);\r\n                            generateMask(maskPrefix + masks[0], maskParts[1], metadata);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newMask = maskPrefix + maskParts;\r\n                        if ($.inArray(newMask, genmasks) == -1 && newMask != \"\") {\r\n                            genmasks.push(newMask);\r\n                            maskTemplate = getMaskTemplate(newMask);\r\n                            ms.push({\r\n                                \"mask\": newMask,\r\n                                \"_buffer\": maskTemplate[\"mask\"],\r\n                                \"buffer\": maskTemplate[\"mask\"].slice(),\r\n                                \"tests\": getTestingChain(newMask),\r\n                                \"lastValidPosition\": -1,\r\n                                \"greedy\": maskTemplate[\"greedy\"],\r\n                                \"repeat\": maskTemplate[\"repeat\"],\r\n                                \"metadata\": metadata\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                if ($.isFunction(opts.mask)) { //allow mask to be a preprocessing fn - should return a valid mask\r\n                    opts.mask = opts.mask.call(this, opts);\r\n                }\r\n                if ($.isArray(opts.mask)) {\r\n                    $.each(opts.mask, function (ndx, msk) {\r\n                        if (msk[\"mask\"] != undefined) {\r\n                            generateMask(\"\", msk[\"mask\"].toString(), msk);\r\n                        } else\r\n                            generateMask(\"\", msk.toString());\r\n                    });\r\n                } else generateMask(\"\", opts.mask.toString());\r\n\r\n                analyseMask(opts.mask);\r\n\r\n                return opts.greedy ? ms : ms.sort(function (a, b) { return a[\"mask\"].length - b[\"mask\"].length; });\r\n            }\r\n            function getPlaceHolder(pos) {\r\n                return opts.placeholder.charAt(pos % opts.placeholder.length);\r\n            }\r\n\r\n            function maskScope(masksets, activeMasksetIndex) {\r\n                var isRTL = false,\r\n                    valueOnFocus = getActiveBuffer().join(''),\r\n                    $el, chromeValueOnInput;\r\n\r\n                //maskset helperfunctions\r\n                function getActiveMaskSet() {\r\n                    return masksets[activeMasksetIndex];\r\n                }\r\n\r\n                function getActiveTests() {\r\n                    return getActiveMaskSet()['tests'];\r\n                }\r\n\r\n                function getActiveBufferTemplate() {\r\n                    return getActiveMaskSet()['_buffer'];\r\n                }\r\n\r\n                function getActiveBuffer() {\r\n                    return getActiveMaskSet()['buffer'];\r\n                }\r\n\r\n                function isValid(pos, c, strict) { //strict true ~ no correction or autofill\r\n                    strict = strict === true; //always set a value to strict to prevent possible strange behavior in the extensions\r\n\r\n                    function _isValid(position, activeMaskset, c, strict) {\r\n                        var testPos = determineTestPosition(position), loopend = c ? 1 : 0, chrs = '', buffer = activeMaskset[\"buffer\"];\r\n                        for (var i = activeMaskset['tests'][testPos].cardinality; i > loopend; i--) {\r\n                            chrs += getBufferElement(buffer, testPos - (i - 1));\r\n                        }\r\n\r\n                        if (c) {\r\n                            chrs += c;\r\n                        }\r\n\r\n                        //return is false or a json object => { pos: ??, c: ??} or true\r\n                        return activeMaskset['tests'][testPos].fn != null ?\r\n                            activeMaskset['tests'][testPos].fn.test(chrs, buffer, position, strict, opts)\r\n                            : (c == getBufferElement(activeMaskset['_buffer'], position, true) || c == opts.skipOptionalPartCharacter) ?\r\n                                { \"refresh\": true, c: getBufferElement(activeMaskset['_buffer'], position, true), pos: position }\r\n                                : false;\r\n                    }\r\n\r\n                    function PostProcessResults(maskForwards, results) {\r\n                        var hasValidActual = false;\r\n                        $.each(results, function (ndx, rslt) {\r\n                            hasValidActual = $.inArray(rslt[\"activeMasksetIndex\"], maskForwards) == -1 && rslt[\"result\"] !== false;\r\n                            if (hasValidActual) return false;\r\n                        });\r\n                        if (hasValidActual) { //strip maskforwards\r\n                            results = $.map(results, function (rslt, ndx) {\r\n                                if ($.inArray(rslt[\"activeMasksetIndex\"], maskForwards) == -1) {\r\n                                    return rslt;\r\n                                } else {\r\n                                    masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = actualLVP;\r\n                                }\r\n                            });\r\n                        } else { //keep maskforwards with the least forward\r\n                            var lowestPos = -1, lowestIndex = -1;\r\n                            $.each(results, function (ndx, rslt) {\r\n                                if ($.inArray(rslt[\"activeMasksetIndex\"], maskForwards) != -1 && rslt[\"result\"] !== false & (lowestPos == -1 || lowestPos > rslt[\"result\"][\"pos\"])) {\r\n                                    lowestPos = rslt[\"result\"][\"pos\"];\r\n                                    lowestIndex = rslt[\"activeMasksetIndex\"];\r\n                                }\r\n                            });\r\n                            results = $.map(results, function (rslt, ndx) {\r\n                                if ($.inArray(rslt[\"activeMasksetIndex\"], maskForwards) != -1) {\r\n                                    if (rslt[\"result\"][\"pos\"] == lowestPos) {\r\n                                        return rslt;\r\n                                    } else if (rslt[\"result\"] !== false) {\r\n                                        for (var i = pos; i < lowestPos; i++) {\r\n                                            rsltValid = _isValid(i, masksets[rslt[\"activeMasksetIndex\"]], masksets[lowestIndex][\"buffer\"][i], true);\r\n                                            if (rsltValid === false) {\r\n                                                masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = lowestPos - 1;\r\n                                                break;\r\n                                            } else {\r\n                                                setBufferElement(masksets[rslt[\"activeMasksetIndex\"]][\"buffer\"], i, masksets[lowestIndex][\"buffer\"][i], true);\r\n                                                masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = i;\r\n                                            }\r\n                                        }\r\n                                        //also check check for the lowestpos with the new input\r\n                                        rsltValid = _isValid(lowestPos, masksets[rslt[\"activeMasksetIndex\"]], c, true);\r\n                                        if (rsltValid !== false) {\r\n                                            setBufferElement(masksets[rslt[\"activeMasksetIndex\"]][\"buffer\"], lowestPos, c, true);\r\n                                            masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = lowestPos;\r\n                                        }\r\n                                        //console.log(\"ndx \" + rslt[\"activeMasksetIndex\"] + \" validate \" + masksets[rslt[\"activeMasksetIndex\"]][\"buffer\"].join('') + \" lv \" + masksets[rslt[\"activeMasksetIndex\"]]['lastValidPosition']);\r\n                                        return rslt;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        return results;\r\n                    }\r\n\r\n                    if (strict) {\r\n                        var result = _isValid(pos, getActiveMaskSet(), c, strict); //only check validity in current mask when validating strict\r\n                        if (result === true) {\r\n                            result = { \"pos\": pos }; //always take a possible corrected maskposition into account\r\n                        }\r\n                        return result;\r\n                    }\r\n\r\n                    var results = [], result = false, currentActiveMasksetIndex = activeMasksetIndex,\r\n                        actualBuffer = getActiveBuffer().slice(), actualLVP = getActiveMaskSet()[\"lastValidPosition\"],\r\n                        actualPrevious = seekPrevious(pos),\r\n                        maskForwards = [];\r\n                    $.each(masksets, function (index, value) {\r\n                        if (typeof (value) == \"object\") {\r\n                            activeMasksetIndex = index;\r\n\r\n                            var maskPos = pos;\r\n                            var lvp = getActiveMaskSet()['lastValidPosition'],\r\n                                rsltValid;\r\n                            if (lvp == actualLVP) {\r\n                                if ((maskPos - actualLVP) > 1) {\r\n                                    for (var i = lvp == -1 ? 0 : lvp; i < maskPos; i++) {\r\n                                        rsltValid = _isValid(i, getActiveMaskSet(), actualBuffer[i], true);\r\n                                        if (rsltValid === false) {\r\n                                            break;\r\n                                        } else {\r\n                                            setBufferElement(getActiveBuffer(), i, actualBuffer[i], true);\r\n                                            if (rsltValid === true) {\r\n                                                rsltValid = { \"pos\": i }; //always take a possible corrected maskposition into account\r\n                                            }\r\n                                            var newValidPosition = rsltValid.pos || i;\r\n                                            if (getActiveMaskSet()['lastValidPosition'] < newValidPosition)\r\n                                                getActiveMaskSet()['lastValidPosition'] = newValidPosition; //set new position from isValid\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //does the input match on a further position?\r\n                                if (!isMask(maskPos) && !_isValid(maskPos, getActiveMaskSet(), c, strict)) {\r\n                                    var maxForward = seekNext(maskPos) - maskPos;\r\n                                    for (var fw = 0; fw < maxForward; fw++) {\r\n                                        if (_isValid(++maskPos, getActiveMaskSet(), c, strict) !== false)\r\n                                            break;\r\n                                    }\r\n                                    maskForwards.push(activeMasksetIndex);\r\n                                    //console.log('maskforward ' + activeMasksetIndex + \" pos \" + pos + \" maskPos \" + maskPos);\r\n                                }\r\n                            }\r\n\r\n                            if (getActiveMaskSet()['lastValidPosition'] >= actualLVP || activeMasksetIndex == currentActiveMasksetIndex) {\r\n                                if (maskPos >= 0 && maskPos < getMaskLength()) {\r\n                                    result = _isValid(maskPos, getActiveMaskSet(), c, strict);\r\n                                    if (result !== false) {\r\n                                        if (result === true) {\r\n                                            result = { \"pos\": maskPos }; //always take a possible corrected maskposition into account\r\n                                        }\r\n                                        var newValidPosition = result.pos || maskPos;\r\n                                        if (getActiveMaskSet()['lastValidPosition'] < newValidPosition)\r\n                                            getActiveMaskSet()['lastValidPosition'] = newValidPosition; //set new position from isValid\r\n                                    }\r\n                                    //console.log(\"pos \" + pos + \" ndx \" + activeMasksetIndex + \" validate \" + getActiveBuffer().join('') + \" lv \" + getActiveMaskSet()['lastValidPosition']);\r\n                                    results.push({ \"activeMasksetIndex\": index, \"result\": result });\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    activeMasksetIndex = currentActiveMasksetIndex; //reset activeMasksetIndex\r\n\r\n                    return PostProcessResults(maskForwards, results); //return results of the multiple mask validations\r\n                }\r\n\r\n                function determineActiveMasksetIndex() {\r\n                    var currentMasksetIndex = activeMasksetIndex,\r\n                        highestValid = { \"activeMasksetIndex\": 0, \"lastValidPosition\": -1, \"next\": -1 };\r\n                    $.each(masksets, function (index, value) {\r\n                        if (typeof (value) == \"object\") {\r\n                            activeMasksetIndex = index;\r\n                            if (getActiveMaskSet()['lastValidPosition'] > highestValid['lastValidPosition']) {\r\n                                highestValid[\"activeMasksetIndex\"] = index;\r\n                                highestValid[\"lastValidPosition\"] = getActiveMaskSet()['lastValidPosition'];\r\n                                highestValid[\"next\"] = seekNext(getActiveMaskSet()['lastValidPosition']);\r\n                            } else if (getActiveMaskSet()['lastValidPosition'] == highestValid['lastValidPosition'] &&\r\n                                   (highestValid['next'] == -1 || highestValid['next'] > seekNext(getActiveMaskSet()['lastValidPosition']))) {\r\n                                highestValid[\"activeMasksetIndex\"] = index;\r\n                                highestValid[\"lastValidPosition\"] = getActiveMaskSet()['lastValidPosition'];\r\n                                highestValid[\"next\"] = seekNext(getActiveMaskSet()['lastValidPosition']);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    activeMasksetIndex = highestValid[\"lastValidPosition\"] != -1 && masksets[currentMasksetIndex][\"lastValidPosition\"] == highestValid[\"lastValidPosition\"] ? currentMasksetIndex : highestValid[\"activeMasksetIndex\"];\r\n                    if (currentMasksetIndex != activeMasksetIndex) {\r\n                        clearBuffer(getActiveBuffer(), seekNext(highestValid[\"lastValidPosition\"]), getMaskLength());\r\n                        getActiveMaskSet()[\"writeOutBuffer\"] = true;\r\n                    }\r\n                    $el.data('_inputmask')['activeMasksetIndex'] = activeMasksetIndex; //store the activeMasksetIndex\r\n                }\r\n\r\n                function isMask(pos) {\r\n                    var testPos = determineTestPosition(pos);\r\n                    var test = getActiveTests()[testPos];\r\n\r\n                    return test != undefined ? test.fn : false;\r\n                }\r\n\r\n                function determineTestPosition(pos) {\r\n                    return pos % getActiveTests().length;\r\n                }\r\n\r\n\r\n\r\n                function getMaskLength() {\r\n                    return opts.getMaskLength(getActiveBufferTemplate(), getActiveMaskSet()['greedy'], getActiveMaskSet()['repeat'], getActiveBuffer(), opts);\r\n                }\r\n\r\n                //pos: from position\r\n\r\n                function seekNext(pos) {\r\n                    var maskL = getMaskLength();\r\n                    if (pos >= maskL) return maskL;\r\n                    var position = pos;\r\n                    while (++position < maskL && !isMask(position)) {\r\n                    }\r\n                    ;\r\n                    return position;\r\n                }\r\n\r\n                //pos: from position\r\n\r\n                function seekPrevious(pos) {\r\n                    var position = pos;\r\n                    if (position <= 0) return 0;\r\n\r\n                    while (--position > 0 && !isMask(position)) {\r\n                    }\r\n                    ;\r\n                    return position;\r\n                }\r\n\r\n                function setBufferElement(buffer, position, element, autoPrepare) {\r\n                    if (autoPrepare) position = prepareBuffer(buffer, position);\r\n\r\n                    var test = getActiveTests()[determineTestPosition(position)];\r\n                    var elem = element;\r\n                    if (elem != undefined && test != undefined) {\r\n                        switch (test.casing) {\r\n                            case \"upper\":\r\n                                elem = element.toUpperCase();\r\n                                break;\r\n                            case \"lower\":\r\n                                elem = element.toLowerCase();\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    buffer[position] = elem;\r\n                }\r\n\r\n                function getBufferElement(buffer, position, autoPrepare) {\r\n                    if (autoPrepare) position = prepareBuffer(buffer, position);\r\n                    return buffer[position];\r\n                }\r\n\r\n                //needed to handle the non-greedy mask repetitions\r\n\r\n                function prepareBuffer(buffer, position) {\r\n                    var j;\r\n                    while (buffer[position] == undefined && buffer.length < getMaskLength()) {\r\n                        j = 0;\r\n                        while (getActiveBufferTemplate()[j] !== undefined) { //add a new buffer\r\n                            buffer.push(getActiveBufferTemplate()[j++]);\r\n                        }\r\n                    }\r\n\r\n                    return position;\r\n                }\r\n\r\n                function writeBuffer(input, buffer, caretPos) {\r\n                    input._valueSet(buffer.join(''));\r\n                    if (caretPos != undefined) {\r\n                        caret(input, caretPos);\r\n                    }\r\n                }\r\n\r\n                ;\r\n\r\n                function clearBuffer(buffer, start, end, stripNomasks) {\r\n                    for (var i = start, maskL = getMaskLength() ; i < end && i < maskL; i++) {\r\n                        if (stripNomasks === true) {\r\n                            if (!isMask(i))\r\n                                setBufferElement(buffer, i, \"\");\r\n                        } else\r\n                            setBufferElement(buffer, i, getBufferElement(getActiveBufferTemplate().slice(), i, true));\r\n                    }\r\n                }\r\n\r\n                ;\r\n\r\n                function setReTargetPlaceHolder(buffer, pos) {\r\n                    var testPos = determineTestPosition(pos);\r\n                    setBufferElement(buffer, pos, getBufferElement(getActiveBufferTemplate(), testPos));\r\n                }\r\n\r\n                function checkVal(input, writeOut, strict, nptvl, intelliCheck) {\r\n                    var inputValue = nptvl != undefined ? nptvl.slice() : truncateInput(input._valueGet()).split('');\r\n\r\n                    $.each(masksets, function (ndx, ms) {\r\n                        if (typeof (ms) == \"object\") {\r\n                            ms[\"buffer\"] = ms[\"_buffer\"].slice();\r\n                            ms[\"lastValidPosition\"] = -1;\r\n                            ms[\"p\"] = -1;\r\n                        }\r\n                    });\r\n                    if (strict !== true) activeMasksetIndex = 0;\r\n                    if (writeOut) input._valueSet(\"\"); //initial clear\r\n                    var ml = getMaskLength();\r\n                    $.each(inputValue, function (ndx, charCode) {\r\n                        if(intelliCheck === true) {\r\n                            var p = getActiveMaskSet()[\"p\"], lvp = p == -1 ? p : seekPrevious(p),\r\n                            pos = lvp == -1 ? ndx : seekNext(lvp);\r\n                            if ($.inArray(charCode, getActiveBufferTemplate().slice(lvp + 1, pos)) == -1) {\r\n                                $(input).trigger(\"_keypress\", [true, charCode.charCodeAt(0), writeOut, strict, ndx]);\r\n                            }\r\n                        } else {\r\n                            $(input).trigger(\"_keypress\", [true, charCode.charCodeAt(0), writeOut, strict, ndx]);\r\n                        }\r\n                    });\r\n\r\n                    if (strict === true && getActiveMaskSet()[\"p\"] != -1) {\r\n                        getActiveMaskSet()[\"lastValidPosition\"] = seekPrevious(getActiveMaskSet()[\"p\"]);\r\n                    }\r\n                }\r\n\r\n                function escapeRegex(str) {\r\n                    return $.inputmask.escapeRegex.call(this, str);\r\n                }\r\n\r\n                function truncateInput(inputValue) {\r\n                    return inputValue.replace(new RegExp(\"(\" + escapeRegex(getActiveBufferTemplate().join('')) + \")*$\"), \"\");\r\n                }\r\n\r\n                function clearOptionalTail(input) {\r\n                    var buffer = getActiveBuffer(), tmpBuffer = buffer.slice(), testPos, pos;\r\n                    for (var pos = tmpBuffer.length - 1; pos >= 0; pos--) {\r\n                        var testPos = determineTestPosition(pos);\r\n                        if (getActiveTests()[testPos].optionality) {\r\n                            if (!isMask(pos) || !isValid(pos, buffer[pos], true))\r\n                                tmpBuffer.pop();\r\n                            else break;\r\n                        } else break;\r\n                    }\r\n                    writeBuffer(input, tmpBuffer);\r\n                }\r\n\r\n                //functionality fn\r\n                this.unmaskedvalue = function ($input, skipDatepickerCheck) {\r\n                    isRTL = $input.data('_inputmask')['isRTL'];\r\n                    return unmaskedvalue($input, skipDatepickerCheck);\r\n                };\r\n                function unmaskedvalue($input, skipDatepickerCheck) {\r\n                    if (getActiveTests() && (skipDatepickerCheck === true || !$input.hasClass('hasDatepicker'))) {\r\n                        //checkVal(input, false, true);\r\n                        var umValue = $.map(getActiveBuffer(), function (element, index) {\r\n                            return isMask(index) && isValid(index, element, true) ? element : null;\r\n                        });\r\n                        return (isRTL ? umValue.reverse() : umValue).join('');\r\n                    } else {\r\n                        return $input[0]._valueGet();\r\n                    }\r\n                }\r\n\r\n                function TranslatePosition(pos) {\r\n                    if (isRTL && typeof pos == 'number' && (!opts.greedy || opts.placeholder != \"\")) {\r\n                        var bffrLght = getActiveBuffer().length;\r\n                        pos = bffrLght - pos;\r\n                    }\r\n                    return pos;\r\n                }\r\n                function caret(input, begin, end) {\r\n                    var npt = input.jquery && input.length > 0 ? input[0] : input, range;\r\n                    if (typeof begin == 'number') {\r\n                        begin = TranslatePosition(begin); end = TranslatePosition(end);\r\n                        if (!$(input).is(':visible')) {\r\n                            return;\r\n                        }\r\n                        end = (typeof end == 'number') ? end : begin;\r\n                        npt.scrollLeft = npt.scrollWidth;\r\n                        if (opts.insertMode == false && begin == end) end++; //set visualization for insert/overwrite mode\r\n                        if (npt.setSelectionRange) {\r\n                            npt.selectionStart = begin;\r\n                            npt.selectionEnd = android ? begin : end;\r\n\r\n                        } else if (npt.createTextRange) {\r\n                            range = npt.createTextRange();\r\n                            range.collapse(true);\r\n                            range.moveEnd('character', end);\r\n                            range.moveStart('character', begin);\r\n                            range.select();\r\n                        }\r\n                    } else {\r\n                        if (!$(input).is(':visible')) {\r\n                            return { \"begin\": 0, \"end\": 0 };\r\n                        }\r\n                        if (npt.setSelectionRange) {\r\n                            begin = npt.selectionStart;\r\n                            end = npt.selectionEnd;\r\n                        } else if (document.selection && document.selection.createRange) {\r\n                            range = document.selection.createRange();\r\n                            begin = 0 - range.duplicate().moveStart('character', -100000);\r\n                            end = begin + range.text.length;\r\n                        }\r\n                        begin = TranslatePosition(begin); end = TranslatePosition(end);\r\n                        return { \"begin\": begin, \"end\": end };\r\n                    }\r\n                };\r\n\r\n                this.isComplete = function (buffer) {\r\n                    return isComplete(buffer);\r\n                };\r\n                function isComplete(buffer) { //return true / false / undefined (repeat *)\r\n                    if (opts.repeat == \"*\") return undefined;\r\n                    var complete = false, highestValidPosition = 0, currentActiveMasksetIndex = activeMasksetIndex;\r\n                    $.each(masksets, function (ndx, ms) {\r\n                        if (typeof (ms) == \"object\") {\r\n                            activeMasksetIndex = ndx;\r\n                            var aml = seekPrevious(getMaskLength());\r\n                            if (ms[\"lastValidPosition\"] >= highestValidPosition && ms[\"lastValidPosition\"] == aml) {\r\n                                var msComplete = true;\r\n                                for (var i = 0; i <= aml; i++) {\r\n                                    var mask = isMask(i), testPos = determineTestPosition(i);\r\n                                    if ((mask && (buffer[i] == undefined || buffer[i] == getPlaceHolder(i))) || (!mask && buffer[i] != getActiveBufferTemplate()[testPos])) {\r\n                                        msComplete = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                complete = complete || msComplete;\r\n                                if (complete) //break loop\r\n                                    return false;\r\n                            }\r\n                            highestValidPosition = ms[\"lastValidPosition\"];\r\n                        }\r\n                    });\r\n                    activeMasksetIndex = currentActiveMasksetIndex; //reset activeMaskset\r\n                    return complete;\r\n                }\r\n\r\n                function isSelection(begin, end) {\r\n                    return isRTL ? (begin - end) > 1 || ((begin - end) == 1 && opts.insertMode) :\r\n                            (end - begin) > 1 || ((end - begin) == 1 && opts.insertMode);\r\n                }\r\n\r\n                this.mask = function (el) {\r\n                    $el = $(el);\r\n                    if (!$el.is(\":input\")) return;\r\n\r\n                    //store tests & original buffer in the input element - used to get the unmasked value\r\n                    $el.data('_inputmask', {\r\n                        'masksets': masksets,\r\n                        'activeMasksetIndex': activeMasksetIndex,\r\n                        'opts': opts,\r\n                        'isRTL': false\r\n                    });\r\n\r\n                    //show tooltip\r\n                    if (opts.showTooltip) {\r\n                        $el.prop(\"title\", getActiveMaskSet()[\"mask\"]);\r\n                    }\r\n\r\n                    //correct greedy setting if needed\r\n                    getActiveMaskSet()['greedy'] = getActiveMaskSet()['greedy'] ? getActiveMaskSet()['greedy'] : getActiveMaskSet()['repeat'] == 0;\r\n\r\n                    //handle maxlength attribute\r\n                    if ($el.attr(\"maxLength\") != null) //only when the attribute is set\r\n                    {\r\n                        var maxLength = $el.prop('maxLength');\r\n                        if (maxLength > -1) { //handle *-repeat\r\n                            $.each(masksets, function (ndx, ms) {\r\n                                if (typeof (ms) == \"object\") {\r\n                                    if (ms[\"repeat\"] == \"*\") {\r\n                                        ms[\"repeat\"] = maxLength;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        if (getMaskLength() >= maxLength && maxLength > -1) { //FF sets no defined max length to -1\r\n                            if (maxLength < getActiveBufferTemplate().length) getActiveBufferTemplate().length = maxLength;\r\n                            if (getActiveMaskSet()['greedy'] == false) {\r\n                                getActiveMaskSet()['repeat'] = Math.round(maxLength / getActiveBufferTemplate().length);\r\n                            }\r\n                            $el.prop('maxLength', getMaskLength() * 2);\r\n                        }\r\n                    }\r\n\r\n                    patchValueProperty(el);\r\n\r\n                    //init vars\r\n                    var skipKeyPressEvent = false, //Safari 5.1.x - modal dialog fires keypress twice workaround\r\n                        ignorable = false;\r\n\r\n                    if (opts.numericInput) opts.isNumeric = opts.numericInput;\r\n                    if (el.dir == \"rtl\" || (opts.numericInput && opts.rightAlignNumerics) || (opts.isNumeric && opts.rightAlignNumerics))\r\n                        $el.css(\"text-align\", \"right\");\r\n\r\n                    if (el.dir == \"rtl\" || opts.numericInput) {\r\n                        el.dir = \"ltr\";\r\n                        $el.removeAttr(\"dir\");\r\n                        var inputData = $el.data('_inputmask');\r\n                        inputData['isRTL'] = true;\r\n                        $el.data('_inputmask', inputData);\r\n                        isRTL = true;\r\n                    }\r\n\r\n                    //unbind all events - to make sure that no other mask will interfere when re-masking\r\n                    $el.unbind(\".inputmask\");\r\n                    $el.removeClass('focus.inputmask');\r\n                    //bind events\r\n                    $el.closest('form').bind(\"submit\", function () { //trigger change on submit if any\r\n                        if (valueOnFocus != getActiveBuffer().join('')) {\r\n                            $el.change();\r\n                        }\r\n                    }).bind('reset', function () {\r\n                        setTimeout(function () {\r\n                            $el.trigger(\"setvalue\");\r\n                        }, 0);\r\n                    });\r\n                    $el.bind(\"mouseenter.inputmask\", function () {\r\n                        var $input = $(this), input = this;\r\n                        if (!$input.hasClass('focus.inputmask') && opts.showMaskOnHover) {\r\n                            if (input._valueGet() != getActiveBuffer().join('')) {\r\n                                writeBuffer(input, getActiveBuffer());\r\n                            }\r\n                        }\r\n                    }).bind(\"blur.inputmask\", function () {\r\n                        var $input = $(this), input = this, nptValue = input._valueGet(), buffer = getActiveBuffer();\r\n                        $input.removeClass('focus.inputmask');\r\n                        if (valueOnFocus != getActiveBuffer().join('')) {\r\n                            $input.change();\r\n                        }\r\n                        if (opts.clearMaskOnLostFocus && nptValue != '') {\r\n                            if (nptValue == getActiveBufferTemplate().join(''))\r\n                                input._valueSet('');\r\n                            else { //clearout optional tail of the mask\r\n                                clearOptionalTail(input);\r\n                            }\r\n                        }\r\n                        if (isComplete(buffer) === false) {\r\n                            $input.trigger(\"incomplete\");\r\n                            if (opts.clearIncomplete) {\r\n                                $.each(masksets, function (ndx, ms) {\r\n                                    if (typeof (ms) == \"object\") {\r\n                                        ms[\"buffer\"] = ms[\"_buffer\"].slice();\r\n                                        ms[\"lastValidPosition\"] = -1;\r\n                                    }\r\n                                });\r\n                                activeMasksetIndex = 0;\r\n                                if (opts.clearMaskOnLostFocus)\r\n                                    input._valueSet('');\r\n                                else {\r\n                                    buffer = getActiveBufferTemplate().slice();\r\n                                    writeBuffer(input, buffer);\r\n                                }\r\n                            }\r\n                        }\r\n                    }).bind(\"focus.inputmask\", function () {\r\n                        var $input = $(this), input = this, nptValue = input._valueGet();\r\n                        if (opts.showMaskOnFocus && !$input.hasClass('focus.inputmask') && (!opts.showMaskOnHover || (opts.showMaskOnHover && nptValue == ''))) {\r\n                            if (input._valueGet() != getActiveBuffer().join('')) {\r\n                                writeBuffer(input, getActiveBuffer(), seekNext(getActiveMaskSet()[\"lastValidPosition\"]));\r\n                            }\r\n                        }\r\n                        $input.addClass('focus.inputmask');\r\n                        valueOnFocus = getActiveBuffer().join('');\r\n                    }).bind(\"mouseleave.inputmask\", function () {\r\n                        var $input = $(this), input = this;\r\n                        if (opts.clearMaskOnLostFocus) {\r\n                            if (!$input.hasClass('focus.inputmask') && input._valueGet() != $input.attr(\"placeholder\")) {\r\n                                if (input._valueGet() == getActiveBufferTemplate().join('') || input._valueGet() == '')\r\n                                    input._valueSet('');\r\n                                else { //clearout optional tail of the mask\r\n                                    clearOptionalTail(input);\r\n                                }\r\n                            }\r\n                        }\r\n                    }).bind(\"click.inputmask\", function () {\r\n                        var input = this;\r\n                        setTimeout(function () {\r\n                            var selectedCaret = caret(input), buffer = getActiveBuffer();\r\n                            if (selectedCaret.begin == selectedCaret.end) {\r\n                                var clickPosition = opts.isRTL ? TranslatePosition(selectedCaret.begin) : selectedCaret.begin,\r\n                                    lvp = getActiveMaskSet()[\"lastValidPosition\"],\r\n                                    lastPosition;\r\n                                if (opts.isNumeric) {\r\n                                    lastPosition = opts.skipRadixDance === false && opts.radixPoint != \"\" && $.inArray(opts.radixPoint, buffer) != -1 ?\r\n                                        (opts.numericInput ? seekNext($.inArray(opts.radixPoint, buffer)) : $.inArray(opts.radixPoint, buffer)) :\r\n                                        seekNext(lvp);\r\n                                } else {\r\n                                    lastPosition = seekNext(lvp);\r\n                                }\r\n                                if (clickPosition < lastPosition) {\r\n                                    if (isMask(clickPosition))\r\n                                        caret(input, clickPosition);\r\n                                    else caret(input, seekNext(clickPosition));\r\n                                } else\r\n                                    caret(input, lastPosition);\r\n                            }\r\n                        }, 0);\r\n                    }).bind('dblclick.inputmask', function () {\r\n                        var input = this;\r\n                        setTimeout(function () {\r\n                            caret(input, 0, seekNext(getActiveMaskSet()[\"lastValidPosition\"]));\r\n                        }, 0);\r\n                    }).bind(pasteEvent + \".inputmask dragdrop.inputmask drop.inputmask\", function (e) {\r\n                        var input = this, $input = $(input);\r\n\r\n                        //paste event for IE8 and lower I guess ;-)\r\n                        if (e.type == \"propertychange\" && input._valueGet().length <= getMaskLength()) {\r\n                            return true;\r\n                        }\r\n                        setTimeout(function () {\r\n                            checkVal(input, true, false, undefined, true);\r\n                            if (isComplete(getActiveBuffer()) === true)\r\n                                $input.trigger(\"complete\");\r\n                            $input.click();\r\n                        }, 0);\r\n                    }).bind('setvalue.inputmask', function () {\r\n                        var input = this;\r\n                        checkVal(input, true);\r\n                        valueOnFocus = getActiveBuffer().join('');\r\n                        if (input._valueGet() == getActiveBufferTemplate().join(''))\r\n                            input._valueSet('');\r\n                    }).bind(\"_keypress.inputmask\", keypressEvent //will be skipped be the eventruler\r\n                    ).bind('complete.inputmask', opts.oncomplete\r\n                    ).bind('incomplete.inputmask', opts.onincomplete\r\n                    ).bind('cleared.inputmask', opts.oncleared\r\n                    ).bind(\"keyup.inputmask\", keyupEvent);\r\n\r\n                    if (androidchrome) {\r\n                        $el.bind(\"input.inputmask\", function (e) {\r\n                            var input = this, $input = $(input);\r\n\r\n                            chromeValueOnInput = getActiveBuffer().join('');\r\n                            checkVal(input, false, false);\r\n                            writeBuffer(input, getActiveBuffer());\r\n                            if (isComplete(getActiveBuffer()) === true)\r\n                                $input.trigger(\"complete\");\r\n                            $input.click();\r\n                        });\r\n                    } else {\r\n                        $el.bind(\"keydown.inputmask\", keydownEvent\r\n                        ).bind(\"keypress.inputmask\", keypressEvent);\r\n                    }\r\n\r\n                    //apply mask\r\n                    checkVal(el, true, false);\r\n                    valueOnFocus = getActiveBuffer().join('');\r\n                    // Wrap document.activeElement in a try/catch block since IE9 throw \"Unspecified error\" if document.activeElement is undefined when we are in an IFrame.\r\n                    var activeElement;\r\n                    try {\r\n                        activeElement = document.activeElement;\r\n                    } catch (e) {\r\n                    }\r\n                    if (activeElement === el) { //position the caret when in focus\r\n                        $el.addClass('focus.inputmask');\r\n                        caret(el, seekNext(getActiveMaskSet()[\"lastValidPosition\"]));\r\n                    } else if (opts.clearMaskOnLostFocus) {\r\n                        if (getActiveBuffer().join('') == getActiveBufferTemplate().join('')) {\r\n                            el._valueSet('');\r\n                        } else {\r\n                            clearOptionalTail(el);\r\n                        }\r\n                    } else {\r\n                        writeBuffer(el, getActiveBuffer());\r\n                    }\r\n\r\n                    installEventRuler(el);\r\n\r\n                    //private functions\r\n\r\n                    function installEventRuler(npt) {\r\n                        var events = $._data(npt).events;\r\n\r\n                        $.each(events, function (eventType, eventHandlers) {\r\n                            $.each(eventHandlers, function (ndx, eventHandler) {\r\n                                if (eventHandler.namespace == \"inputmask\") {\r\n                                    if (eventHandler.type != \"setvalue\" && eventHandler.type != \"_keypress\") {\r\n                                        var handler = eventHandler.handler;\r\n                                        eventHandler.handler = function (e) {\r\n                                            if (this.readOnly || this.disabled)\r\n                                                e.preventDefault;\r\n                                            else\r\n                                                return handler.apply(this, arguments);\r\n                                        };\r\n                                    }\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    function patchValueProperty(npt) {\r\n                        var valueProperty;\r\n                        if (Object.getOwnPropertyDescriptor)\r\n                            valueProperty = Object.getOwnPropertyDescriptor(npt, \"value\");\r\n                        if (valueProperty && valueProperty.get) {\r\n                            if (!npt._valueGet) {\r\n                                var valueGet = valueProperty.get;\r\n                                var valueSet = valueProperty.set;\r\n                                npt._valueGet = function () {\r\n                                    return isRTL ? valueGet.call(this).split('').reverse().join('') : valueGet.call(this);\r\n                                };\r\n                                npt._valueSet = function (value) {\r\n                                    valueSet.call(this, isRTL ? value.split('').reverse().join('') : value);\r\n                                };\r\n\r\n                                Object.defineProperty(npt, \"value\", {\r\n                                    get: function () {\r\n                                        var $self = $(this), inputData = $(this).data('_inputmask'), masksets = inputData['masksets'],\r\n                                            activeMasksetIndex = inputData['activeMasksetIndex'];\r\n                                        return inputData && inputData['opts'].autoUnmask ? $self.inputmask('unmaskedvalue') : valueGet.call(this) != masksets[activeMasksetIndex]['_buffer'].join('') ? valueGet.call(this) : '';\r\n                                    },\r\n                                    set: function (value) {\r\n                                        valueSet.call(this, value);\r\n                                        $(this).triggerHandler('setvalue.inputmask');\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (document.__lookupGetter__ && npt.__lookupGetter__(\"value\")) {\r\n                            if (!npt._valueGet) {\r\n                                var valueGet = npt.__lookupGetter__(\"value\");\r\n                                var valueSet = npt.__lookupSetter__(\"value\");\r\n                                npt._valueGet = function () {\r\n                                    return isRTL ? valueGet.call(this).split('').reverse().join('') : valueGet.call(this);\r\n                                };\r\n                                npt._valueSet = function (value) {\r\n                                    valueSet.call(this, isRTL ? value.split('').reverse().join('') : value);\r\n                                };\r\n\r\n                                npt.__defineGetter__(\"value\", function () {\r\n                                    var $self = $(this), inputData = $(this).data('_inputmask'), masksets = inputData['masksets'],\r\n                                        activeMasksetIndex = inputData['activeMasksetIndex'];\r\n                                    return inputData && inputData['opts'].autoUnmask ? $self.inputmask('unmaskedvalue') : valueGet.call(this) != masksets[activeMasksetIndex]['_buffer'].join('') ? valueGet.call(this) : '';\r\n                                });\r\n                                npt.__defineSetter__(\"value\", function (value) {\r\n                                    valueSet.call(this, value);\r\n                                    $(this).triggerHandler('setvalue.inputmask');\r\n                                });\r\n                            }\r\n                        } else {\r\n                            if (!npt._valueGet) {\r\n                                npt._valueGet = function () { return isRTL ? this.value.split('').reverse().join('') : this.value; };\r\n                                npt._valueSet = function (value) { this.value = isRTL ? value.split('').reverse().join('') : value; };\r\n                            }\r\n                            if ($.valHooks.text == undefined || $.valHooks.text.inputmaskpatch != true) {\r\n                                var valueGet = $.valHooks.text && $.valHooks.text.get ? $.valHooks.text.get : function (elem) { return elem.value; };\r\n                                var valueSet = $.valHooks.text && $.valHooks.text.set ? $.valHooks.text.set : function (elem, value) { elem.value = value; return elem; };\r\n\r\n                                jQuery.extend($.valHooks, {\r\n                                    text: {\r\n                                        get: function (elem) {\r\n                                            var $elem = $(elem);\r\n                                            if ($elem.data('_inputmask')) {\r\n                                                if ($elem.data('_inputmask')['opts'].autoUnmask)\r\n                                                    return $elem.inputmask('unmaskedvalue');\r\n                                                else {\r\n                                                    var result = valueGet(elem),\r\n                                                        inputData = $elem.data('_inputmask'), masksets = inputData['masksets'],\r\n                                                        activeMasksetIndex = inputData['activeMasksetIndex'];\r\n                                                    return result != masksets[activeMasksetIndex]['_buffer'].join('') ? result : '';\r\n                                                }\r\n                                            } else return valueGet(elem);\r\n                                        },\r\n                                        set: function (elem, value) {\r\n                                            var $elem = $(elem);\r\n                                            var result = valueSet(elem, value);\r\n                                            if ($elem.data('_inputmask')) $elem.triggerHandler('setvalue.inputmask');\r\n                                            return result;\r\n                                        },\r\n                                        inputmaskpatch: true\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //shift chars to left from start to end and put c at end position if defined\r\n                    function shiftL(start, end, c, maskJumps) {\r\n                        var buffer = getActiveBuffer();\r\n                        if (maskJumps !== false) //jumping over nonmask position\r\n                            while (!isMask(start) && start - 1 >= 0) start--;\r\n                        for (var i = start; i < end && i < getMaskLength() ; i++) {\r\n                            if (isMask(i)) {\r\n                                setReTargetPlaceHolder(buffer, i);\r\n                                var j = seekNext(i);\r\n                                var p = getBufferElement(buffer, j);\r\n                                if (p != getPlaceHolder(j)) {\r\n                                    if (j < getMaskLength() && isValid(i, p, true) !== false && getActiveTests()[determineTestPosition(i)].def == getActiveTests()[determineTestPosition(j)].def) {\r\n                                        setBufferElement(buffer, i, getBufferElement(buffer, j), true);\r\n                                        if (j < end) {\r\n                                            setReTargetPlaceHolder(buffer, j); //cleanup next position\r\n                                        }\r\n                                    } else {\r\n                                        if (isMask(i))\r\n                                            break;\r\n                                    }\r\n                                } //else if (c == undefined) break;\r\n                            } else {\r\n                                setReTargetPlaceHolder(buffer, i);\r\n                            }\r\n                        }\r\n                        if (c != undefined)\r\n                            setBufferElement(buffer, seekPrevious(end), c);\r\n\r\n                        if (getActiveMaskSet()[\"greedy\"] == false) {\r\n                            var trbuffer = truncateInput(buffer.join('')).split('');\r\n                            buffer.length = trbuffer.length;\r\n                            for (var i = 0, bl = buffer.length; i < bl; i++) {\r\n                                buffer[i] = trbuffer[i];\r\n                            }\r\n                            if (buffer.length == 0) getActiveMaskSet()[\"buffer\"] = getActiveBufferTemplate().slice();\r\n                        }\r\n                        return start; //return the used start position\r\n                    }\r\n\r\n                    function shiftR(start, end, c, full) { //full => behave like a push right ~ do not stop on placeholders\r\n                        var buffer = getActiveBuffer();\r\n                        for (var i = start; i <= end && i < getMaskLength() ; i++) {\r\n                            if (isMask(i)) {\r\n                                var t = getBufferElement(buffer, i, true);\r\n                                setBufferElement(buffer, i, c, true);\r\n                                if (t != getPlaceHolder(i)) {\r\n                                    var j = seekNext(i);\r\n                                    if (j < getMaskLength()) {\r\n                                        if (isValid(j, t, true) !== false && getActiveTests()[determineTestPosition(i)].def == getActiveTests()[determineTestPosition(j)].def)\r\n                                            c = t;\r\n                                        else {\r\n                                            if (isMask(j))\r\n                                                break;\r\n                                            else c = t;\r\n                                        }\r\n                                    } else break;\r\n                                } else {\r\n                                    c = t;\r\n                                    if (full !== true) break;\r\n                                }\r\n                            } else\r\n                                setReTargetPlaceHolder(buffer, i);\r\n                        }\r\n                        var lengthBefore = buffer.length;\r\n                        if (getActiveMaskSet()[\"greedy\"] == false) {\r\n                            var trbuffer = truncateInput(buffer.join('')).split('');\r\n                            buffer.length = trbuffer.length;\r\n                            for (var i = 0, bl = buffer.length; i < bl; i++) {\r\n                                buffer[i] = trbuffer[i];\r\n                            }\r\n                            if (buffer.length == 0) getActiveMaskSet()[\"buffer\"] = getActiveBufferTemplate().slice();\r\n                        }\r\n                        return end - (lengthBefore - buffer.length); //return new start position\r\n                    };\r\n\r\n\r\n                    function HandleRemove(input, k, pos) {\r\n                        if (opts.numericInput || isRTL) {\r\n                            switch (k) {\r\n                                case opts.keyCode.BACKSPACE:\r\n                                    k = opts.keyCode.DELETE;\r\n                                    break;\r\n                                case opts.keyCode.DELETE:\r\n                                    k = opts.keyCode.BACKSPACE;\r\n                                    break;\r\n                            }\r\n                            if (isRTL) {\r\n                                var pend = pos.end;\r\n                                pos.end = pos.begin;\r\n                                pos.begin = pend;\r\n                            }\r\n                        }\r\n\r\n                        var isSelection = true;\r\n                        if (pos.begin == pos.end) {\r\n                            var posBegin = k == opts.keyCode.BACKSPACE ? pos.begin - 1 : pos.begin;\r\n                            if (opts.isNumeric && opts.radixPoint != \"\" && getActiveBuffer()[posBegin] == opts.radixPoint) {\r\n                                pos.begin = (getActiveBuffer().length - 1 == posBegin) /* radixPoint is latest? delete it */ ? pos.begin : k == opts.keyCode.BACKSPACE ? posBegin : seekNext(posBegin);\r\n                                pos.end = pos.begin;\r\n                            }\r\n                            isSelection = false;\r\n                            if (k == opts.keyCode.BACKSPACE)\r\n                                pos.begin--;\r\n                            else if (k == opts.keyCode.DELETE)\r\n                                pos.end++;\r\n                        } else if (pos.end - pos.begin == 1 && !opts.insertMode) {\r\n                            isSelection = false;\r\n                            if (k == opts.keyCode.BACKSPACE)\r\n                                pos.begin--;\r\n                        }\r\n\r\n                        clearBuffer(getActiveBuffer(), pos.begin, pos.end);\r\n\r\n                        var ml = getMaskLength();\r\n                        if (opts.greedy == false) {\r\n                            shiftL(pos.begin, ml, undefined, !isRTL && (k == opts.keyCode.BACKSPACE && !isSelection));\r\n                        } else {\r\n                            var newpos = pos.begin;\r\n                            for (var i = pos.begin; i < pos.end; i++) { //seeknext to skip placeholders at start in selection\r\n                                if (isMask(i) || !isSelection)\r\n                                    newpos = shiftL(pos.begin, ml, undefined, !isRTL && (k == opts.keyCode.BACKSPACE && !isSelection));\r\n                            }\r\n                            if (!isSelection) pos.begin = newpos;\r\n                        }\r\n                        var firstMaskPos = seekNext(-1);\r\n                        clearBuffer(getActiveBuffer(), pos.begin, pos.end, true);\r\n                        checkVal(input, false, masksets[1] == undefined || firstMaskPos >= pos.end, getActiveBuffer());\r\n                        if (getActiveMaskSet()['lastValidPosition'] < firstMaskPos) {\r\n                            getActiveMaskSet()[\"lastValidPosition\"] = -1;\r\n                            getActiveMaskSet()[\"p\"] = firstMaskPos;\r\n                        } else {\r\n                            getActiveMaskSet()[\"p\"] = pos.begin;\r\n                        }\r\n                    }\r\n\r\n                    function keydownEvent(e) {\r\n                        //Safari 5.1.x - modal dialog fires keypress twice workaround\r\n                        skipKeyPressEvent = false;\r\n                        var input = this, $input = $(input), k = e.keyCode, pos = caret(input);\r\n\r\n                        //backspace, delete, and escape get special treatment\r\n                        if (k == opts.keyCode.BACKSPACE || k == opts.keyCode.DELETE || (iphone && k == 127) || e.ctrlKey && k == 88) { //backspace/delete\r\n                            e.preventDefault(); //stop default action but allow propagation\r\n                            if (k == 88) valueOnFocus = getActiveBuffer().join('');\r\n                            HandleRemove(input, k, pos);\r\n                            determineActiveMasksetIndex();\r\n                            writeBuffer(input, getActiveBuffer(), getActiveMaskSet()[\"p\"]);\r\n                            if (input._valueGet() == getActiveBufferTemplate().join(''))\r\n                                $input.trigger('cleared');\r\n\r\n                            if (opts.showTooltip) { //update tooltip\r\n                                $input.prop(\"title\", getActiveMaskSet()[\"mask\"]);\r\n                            }\r\n                        }\r\n                        else if (k == opts.keyCode.END || k == opts.keyCode.PAGE_DOWN) { //when END or PAGE_DOWN pressed set position at lastmatch\r\n                            setTimeout(function () {\r\n                                var caretPos = seekNext(getActiveMaskSet()[\"lastValidPosition\"]);\r\n                                if (!opts.insertMode && caretPos == getMaskLength() && !e.shiftKey) caretPos--;\r\n                                caret(input, e.shiftKey ? pos.begin : caretPos, caretPos);\r\n                            }, 0);\r\n                        } else if ((k == opts.keyCode.HOME && !e.shiftKey) || k == opts.keyCode.PAGE_UP) { //Home or page_up\r\n                            caret(input, 0, e.shiftKey ? pos.begin : 0);\r\n                        } else if (k == opts.keyCode.ESCAPE || (k == 90 && e.ctrlKey)) { //escape && undo\r\n                            checkVal(input, true, false, valueOnFocus.split(''));\r\n                            $input.click();\r\n                        } else if (k == opts.keyCode.INSERT && !(e.shiftKey || e.ctrlKey)) { //insert\r\n                            opts.insertMode = !opts.insertMode;\r\n                            caret(input, !opts.insertMode && pos.begin == getMaskLength() ? pos.begin - 1 : pos.begin);\r\n                        } else if (opts.insertMode == false && !e.shiftKey) {\r\n                            if (k == opts.keyCode.RIGHT) {\r\n                                setTimeout(function () {\r\n                                    var caretPos = caret(input);\r\n                                    caret(input, caretPos.begin);\r\n                                }, 0);\r\n                            } else if (k == opts.keyCode.LEFT) {\r\n                                setTimeout(function () {\r\n                                    var caretPos = caret(input);\r\n                                    caret(input, caretPos.begin - 1);\r\n                                }, 0);\r\n                            }\r\n                        }\r\n\r\n                        var currentCaretPos = caret(input);\r\n                        if (opts.onKeyDown.call(this, e, getActiveBuffer(), opts) === true) //extra stuff to execute on keydown\r\n                            caret(input, currentCaretPos.begin, currentCaretPos.end);\r\n                        ignorable = $.inArray(k, opts.ignorables) != -1;\r\n                    }\r\n\r\n\r\n                    function keypressEvent(e, checkval, k, writeOut, strict, ndx) {\r\n                        //Safari 5.1.x - modal dialog fires keypress twice workaround\r\n                        if (k == undefined && skipKeyPressEvent) return false;\r\n                        skipKeyPressEvent = true;\r\n\r\n                        var input = this, $input = $(input);\r\n\r\n                        e = e || window.event;\r\n                        var k = k || e.which || e.charCode || e.keyCode;\r\n\r\n                        if ((!(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) && checkval !== true) {\r\n                            return true;\r\n                        } else {\r\n                            if (k) {\r\n                                //special treat the decimal separator\r\n                                if (checkval !== true && k == 46 && e.shiftKey == false && opts.radixPoint == \",\") k = 44;\r\n\r\n                                var pos, results, result, c = String.fromCharCode(k);\r\n                                if (checkval) {\r\n                                    var pcaret = strict ? ndx : getActiveMaskSet()[\"lastValidPosition\"] + 1;\r\n                                    pos = { begin: pcaret, end: pcaret };\r\n                                } else {\r\n                                    pos = caret(input);\r\n                                }\r\n\r\n                                //should we clear a possible selection??\r\n                                var isSlctn = isSelection(pos.begin, pos.end), redetermineLVP = false,\r\n                                    initialIndex = activeMasksetIndex;\r\n                                if (isSlctn) {\r\n                                    activeMasksetIndex = initialIndex;\r\n                                    $.each(masksets, function (ndx, lmnt) { //init undobuffer for recovery when not valid\r\n                                        if (typeof (lmnt) == \"object\") {\r\n                                            activeMasksetIndex = ndx;\r\n                                            getActiveMaskSet()[\"undoBuffer\"] = getActiveBuffer().join('');\r\n                                        }\r\n                                    });\r\n                                    HandleRemove(input, opts.keyCode.DELETE, pos);\r\n                                    if (!opts.insertMode) { //preserve some space\r\n                                        $.each(masksets, function (ndx, lmnt) {\r\n                                            if (typeof (lmnt) == \"object\") {\r\n                                                activeMasksetIndex = ndx;\r\n                                                shiftR(pos.begin, getMaskLength(), getPlaceHolder(pos.begin), true);\r\n                                                getActiveMaskSet()[\"lastValidPosition\"] = seekNext(getActiveMaskSet()[\"lastValidPosition\"]);\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    activeMasksetIndex = initialIndex; //restore index\r\n                                }\r\n\r\n                                var radixPosition = getActiveBuffer().join('').indexOf(opts.radixPoint);\r\n                                if (opts.isNumeric && checkval !== true && radixPosition != -1) {\r\n                                    if (opts.greedy && pos.begin <= radixPosition) {\r\n                                        pos.begin = seekPrevious(pos.begin);\r\n                                        pos.end = pos.begin;\r\n                                    } else if (c == opts.radixPoint) {\r\n                                        pos.begin = radixPosition;\r\n                                        pos.end = pos.begin;\r\n                                    }\r\n                                }\r\n\r\n\r\n                                var p = pos.begin;\r\n                                results = isValid(p, c, strict);\r\n                                if (strict === true) results = [{ \"activeMasksetIndex\": activeMasksetIndex, \"result\": results }];\r\n                                var minimalForwardPosition = -1;\r\n                                $.each(results, function (index, result) {\r\n                                    activeMasksetIndex = result[\"activeMasksetIndex\"];\r\n                                    getActiveMaskSet()[\"writeOutBuffer\"] = true;\r\n                                    var np = result[\"result\"];\r\n                                    if (np !== false) {\r\n                                        var refresh = false, buffer = getActiveBuffer();\r\n                                        if (np !== true) {\r\n                                            refresh = np[\"refresh\"]; //only rewrite buffer from isValid\r\n                                            p = np.pos != undefined ? np.pos : p; //set new position from isValid\r\n                                            c = np.c != undefined ? np.c : c; //set new char from isValid\r\n                                        }\r\n                                        if (refresh !== true) {\r\n                                            if (opts.insertMode == true) {\r\n                                                var lastUnmaskedPosition = getMaskLength();\r\n                                                var bfrClone = buffer.slice();\r\n                                                while (getBufferElement(bfrClone, lastUnmaskedPosition, true) != getPlaceHolder(lastUnmaskedPosition) && lastUnmaskedPosition >= p) {\r\n                                                    lastUnmaskedPosition = lastUnmaskedPosition == 0 ? -1 : seekPrevious(lastUnmaskedPosition);\r\n                                                }\r\n                                                if (lastUnmaskedPosition >= p) {\r\n                                                    shiftR(p, buffer.length, c);\r\n                                                    //shift the lvp if needed\r\n                                                    var lvp = getActiveMaskSet()[\"lastValidPosition\"], nlvp = seekNext(lvp);\r\n                                                    if (nlvp != getMaskLength() && lvp >= p && (getBufferElement(getActiveBuffer(), nlvp, true) != getPlaceHolder(nlvp))) {\r\n                                                        getActiveMaskSet()[\"lastValidPosition\"] = nlvp;\r\n                                                    }\r\n                                                } else getActiveMaskSet()[\"writeOutBuffer\"] = false;\r\n                                            } else setBufferElement(buffer, p, c, true);\r\n                                            if (minimalForwardPosition == -1 || minimalForwardPosition > seekNext(p)) {\r\n                                                minimalForwardPosition = seekNext(p);\r\n                                            }\r\n                                        } else if (!strict) {\r\n                                            var nextPos = p < getMaskLength() ? p + 1 : p;\r\n                                            if (minimalForwardPosition == -1 || minimalForwardPosition > nextPos) {\r\n                                                minimalForwardPosition = nextPos;\r\n                                            }\r\n                                        }\r\n                                        if (minimalForwardPosition > getActiveMaskSet()[\"p\"])\r\n                                            getActiveMaskSet()[\"p\"] = minimalForwardPosition; //needed for checkval strict\r\n                                    }\r\n                                });\r\n\r\n                                if (strict !== true) {\r\n                                    activeMasksetIndex = initialIndex;\r\n                                    determineActiveMasksetIndex();\r\n                                }\r\n                                if (writeOut !== false) {\r\n                                    $.each(results, function (ndx, rslt) {\r\n                                        if (rslt[\"activeMasksetIndex\"] == activeMasksetIndex) {\r\n                                            result = rslt;\r\n                                            return false;\r\n                                        }\r\n                                    });\r\n                                    if (result != undefined) {\r\n                                        var self = this;\r\n                                        setTimeout(function () { opts.onKeyValidation.call(self, result[\"result\"], opts); }, 0);\r\n                                        if (getActiveMaskSet()[\"writeOutBuffer\"] && result[\"result\"] !== false) {\r\n                                            var buffer = getActiveBuffer();\r\n\r\n                                            var newCaretPosition;\r\n                                            if (checkval) {\r\n                                                newCaretPosition = undefined;\r\n                                            } else if (opts.numericInput) {\r\n                                                if (p > radixPosition) {\r\n                                                    newCaretPosition = seekPrevious(minimalForwardPosition);\r\n                                                } else if (c == opts.radixPoint) {\r\n                                                    newCaretPosition = minimalForwardPosition - 1;\r\n                                                } else newCaretPosition = seekPrevious(minimalForwardPosition - 1);\r\n                                            } else {\r\n                                                newCaretPosition = minimalForwardPosition;\r\n                                            }\r\n\r\n                                            writeBuffer(input, buffer, newCaretPosition);\r\n                                            if (checkval !== true) {\r\n                                                setTimeout(function () { //timeout needed for IE\r\n                                                    if (isComplete(buffer) === true)\r\n                                                        $input.trigger(\"complete\");\r\n                                                }, 0);\r\n                                            }\r\n                                        } else if (isSlctn) {\r\n                                            getActiveMaskSet()[\"buffer\"] = getActiveMaskSet()[\"undoBuffer\"].split('');\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (opts.showTooltip) { //update tooltip\r\n                                    $input.prop(\"title\", getActiveMaskSet()[\"mask\"]);\r\n                                }\r\n                                e.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    function keyupEvent(e) {\r\n                        var $input = $(this), input = this, k = e.keyCode, buffer = getActiveBuffer();\r\n\r\n                        if (androidchrome && k == opts.keyCode.BACKSPACE) {\r\n                            if (chromeValueOnInput == input._valueGet())\r\n                                keydownEvent.call(this, e);\r\n                        }\r\n\r\n                        opts.onKeyUp.call(this, e, buffer, opts); //extra stuff to execute on keyup\r\n                        if (k == opts.keyCode.TAB && opts.showMaskOnFocus) {\r\n                            if ($input.hasClass('focus.inputmask') && input._valueGet().length == 0) {\r\n                                buffer = getActiveBufferTemplate().slice();\r\n                                writeBuffer(input, buffer);\r\n                                caret(input, 0);\r\n                                valueOnFocus = getActiveBuffer().join('');\r\n                            } else {\r\n                                writeBuffer(input, buffer);\r\n                                caret(input, 0, getMaskLength());\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                return this;\r\n            };\r\n            return this;\r\n        };\r\n    }\r\n})(jQuery);\r\n});\r\n","$(function(){\r\n\r\n    /////C A R T\r\n    $( \".delete_cart_item\" ).click( function(){\r\n        var cart_id = $(this).attr('data-id');\r\n        $('.cart_delete[data-id=\"' + cart_id + '\"]').css('display','block');\r\n        $('.payment_cart').removeAttr(\"disabled\");\r\n    });\r\n    $( \".btn-cancel-cart\" ).click( function(){\r\n        var cart_id = $(this).attr('data-id');\r\n        $('.cart_delete[data-id=\"' + cart_id + '\"]').css('display','none');\r\n        $('.payment_cart').removeAttr(\"disabled\");\r\n    });\r\n    $( \".modify_cart_item\" ).click( function(){\r\n        var cart_id = $(this).attr('data-id');\r\n        $('.cart-edit[data-id=\"' + cart_id + '\"]').css('display','table-row');\r\n        $('.cart-display[data-id=\"' + cart_id + '\"]').css('display','none');\r\n        if ($('.cart-edit[data-id=\"' + cart_id + '\"]').is(':visible')) {\r\n            $('.payment_cart').attr(\"disabled\", \"disabled\");\r\n        }\r\n    });\r\n    $( \".btn-cancel-modify\" ).click( function(){\r\n        var cart_id = $(this).attr('data-id');\r\n        $('.cart-edit[data-id=\"' + cart_id + '\"]').css('display','none');\r\n        $('.cart-display[data-id=\"' + cart_id + '\"]').css('display','table-row');\r\n        $('.cart-buttons[data-id=\"' + cart_id + '\"]').css('display','block');\r\n        $('.payment_cart').removeAttr(\"disabled\");\r\n    });\r\n    $( \".cart_back\" ).click( function(){\r\n        var cart_id = $(this).attr('data-id');\r\n        $('.cart-edit[data-id=\"' + cart_id + '\"]').css('display','none');\r\n        $('.cart-display[data-id=\"' + cart_id + '\"]').css('display','table-row');\r\n        $('.cart-buttons[data-id=\"' + cart_id + '\"]').css('display','block');\r\n        $('.payment_cart').removeAttr(\"disabled\");\r\n    });\r\n\r\n    $(\".delete_modal\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.delete-modal-container[data-id=\"' + id + '\"]').css('display','block');\r\n    });\r\n    $(\".hide_modal\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.delete-modal-container[data-id=\"' + id + '\"]').css('display','none');\r\n    });\r\n    $(\"#delete_modal\").click( function (){\r\n        $('.delete-modal-container').css('display','block');\r\n    });\r\n    $(\"#delete_modal_mobile\").click( function (){\r\n        $('.delete-modal-container').css('display','block');\r\n    });\r\n    $(\".hide_modal\").click( function (){\r\n        $('.delete-modal-container').css('display','none');\r\n    });\r\n    $(\".activate\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.activate-confirmation[data-id=\"' + id + '\"]').css('display','block');\r\n    });\r\n    $(\".hide_activate\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.activate-confirmation[data-id=\"' + id + '\"]').css('display','none');\r\n    });\r\n    $(\".deactivate\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.deactivate-confirmation[data-id=\"' + id + '\"]').css('display','block');\r\n    });\r\n    $(\".hide_deactivate\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.deactivate-confirmation[data-id=\"' + id + '\"]').css('display','none');\r\n    });\r\n\r\n    $(\".delete_page\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.delete-modal-container[data-id=\"' + id + '\"]').css('display','block');\r\n    });\r\n    $(\".cancel_page\").click( function (){\r\n        var id = $(this).attr('data-id');\r\n        $('.delete-modal-container[data-id=\"' + id + '\"]').css('display','none');\r\n    });\r\n});\r\n","$(function(){\r\n    //datetimepicker with start and end with time\r\n    $('.startdtp').datetimepicker({\r\n        format: 'M/D/YYYY h:mm A'\r\n    }); \r\n     \r\n    $('.repeatdtp').datetimepicker({\r\n        format: 'M/D/YYYY'\r\n    });\r\n    $('.reminderdtp').datetimepicker({\r\n        format: 'M/D/YYYY'\r\n    });\r\n    $('.enddtp').datetimepicker({\r\n        useCurrent: false,\r\n        format: 'M/D/YYYY h:mm A'\r\n    });\r\n    $(\".startdtp\").on(\"dp.change\", function (e) {\r\n        $('.enddtp').data(\"DateTimePicker\").minDate(e.date);\r\n        \r\n    });\r\n    $(\".enddtp\").on(\"dp.change\", function (e) {\r\n        $('.startdtp').data(\"DateTimePicker\").maxDate(e.date);\r\n    });\r\n    $(\".reminderdtp\").on(\"dp.change\", function (e) {\r\n        var reminder = $('#reminder_date_get').val();\r\n        $('#reminder_date').val(reminder);\r\n    });\r\n\r\n    //datetimepicker with start and end WITHOUT time\r\n    $('.recdtp').datetimepicker({\r\n        format: 'M/D/YYYY'\r\n    });\r\n    $('.startdp').datetimepicker({\r\n        format: 'M/D/YYYY'\r\n    });\r\n    $('.enddp').datetimepicker({\r\n        format: 'M/D/YYYY',\r\n        useCurrent: false //Important! See issue #1075\r\n    });\r\n    $(\".startdp\").on(\"dp.change\", function (e) {\r\n        $('.enddp').data(\"DateTimePicker\").minDate(e.date);\r\n    });\r\n    $(\".enddp\").on(\"dp.change\", function (e) {\r\n        $('.startdp').data(\"DateTimePicker\").maxDate(e.date);\r\n    });\r\n\r\n    //datetimepicker WITHOUT time\r\n    $('.datepicker').datetimepicker({\r\n        format: 'M/D/YYYY'\r\n    });\r\n    //datetimepicker WITH time\r\n    $('.datetimepicker').datetimepicker({\r\n        format: 'M/D/YYYY h:MM A'\r\n    });\r\n\r\n    $('.bdatepicker').datetimepicker({\r\n        format: 'M/D/YYYY',\r\n        viewMode: 'years'\r\n    });\r\n\r\n});\r\n","$(function(){\r\n\r\n    $('.donation_input').keyup(function(){\r\n        if($(this).val().length !=0){\r\n            $('.add_to_cart').attr('disabled', false);\r\n        } else{\r\n            $('.add_to_cart').attr('disabled',true);\r\n        }\r\n    });\r\n    $('.donation_input').keypress(function(e){\r\n        if (this.value.length == 0 && e.which == 48 ){\r\n            return false;\r\n        }\r\n    });\r\n\r\n});\r\n","$(function(){\r\n    $(\".color_scheme\").spectrum({\r\n        showInput: true,\r\n        className: \"full-spectrum\",\r\n        showInitial: true,\r\n        showPalette: true,\r\n        showSelectionPalette: true,\r\n        maxSelectionSize: 10,\r\n        preferredFormat: \"hex\",\r\n        localStorageKey: \"spectrum.demo\",\r\n        move: function (color) {\r\n\r\n        },\r\n        show: function () {\r\n\r\n        },\r\n        beforeShow: function () {\r\n\r\n        },\r\n        hide: function () {\r\n\r\n        },\r\n        change: function() {\r\n\r\n        },\r\n        palette: [\r\n            [\"rgb(0, 0, 0)\", \"rgb(67, 67, 67)\", \"rgb(102, 102, 102)\",\r\n            \"rgb(204, 204, 204)\", \"rgb(217, 217, 217)\",\"rgb(255, 255, 255)\"],\r\n            [\"rgb(152, 0, 0)\", \"rgb(255, 0, 0)\", \"rgb(255, 153, 0)\", \"rgb(255, 255, 0)\", \"rgb(0, 255, 0)\",\r\n            \"rgb(0, 255, 255)\", \"rgb(74, 134, 232)\", \"rgb(0, 0, 255)\", \"rgb(153, 0, 255)\", \"rgb(255, 0, 255)\"],\r\n            [\"rgb(230, 184, 175)\", \"rgb(244, 204, 204)\", \"rgb(252, 229, 205)\", \"rgb(255, 242, 204)\", \"rgb(217, 234, 211)\",\r\n            \"rgb(208, 224, 227)\", \"rgb(201, 218, 248)\", \"rgb(207, 226, 243)\", \"rgb(217, 210, 233)\", \"rgb(234, 209, 220)\",\r\n            \"rgb(221, 126, 107)\", \"rgb(234, 153, 153)\", \"rgb(249, 203, 156)\", \"rgb(255, 229, 153)\", \"rgb(182, 215, 168)\",\r\n            \"rgb(162, 196, 201)\", \"rgb(164, 194, 244)\", \"rgb(159, 197, 232)\", \"rgb(180, 167, 214)\", \"rgb(213, 166, 189)\",\r\n            \"rgb(204, 65, 37)\", \"rgb(224, 102, 102)\", \"rgb(246, 178, 107)\", \"rgb(255, 217, 102)\", \"rgb(147, 196, 125)\",\r\n            \"rgb(118, 165, 175)\", \"rgb(109, 158, 235)\", \"rgb(111, 168, 220)\", \"rgb(142, 124, 195)\", \"rgb(194, 123, 160)\",\r\n            \"rgb(166, 28, 0)\", \"rgb(204, 0, 0)\", \"rgb(230, 145, 56)\", \"rgb(241, 194, 50)\", \"rgb(106, 168, 79)\",\r\n            \"rgb(69, 129, 142)\", \"rgb(60, 120, 216)\", \"rgb(61, 133, 198)\", \"rgb(103, 78, 167)\", \"rgb(166, 77, 121)\",\r\n            \"rgb(91, 15, 0)\", \"rgb(102, 0, 0)\", \"rgb(120, 63, 4)\", \"rgb(127, 96, 0)\", \"rgb(39, 78, 19)\",\r\n            \"rgb(12, 52, 61)\", \"rgb(28, 69, 135)\", \"rgb(7, 55, 99)\", \"rgb(32, 18, 77)\", \"rgb(76, 17, 48)\"]\r\n        ]\r\n    });\r\n    // $('#color_scheme').prop('disabled',true);\r\n    $('.color_scheme').css('display','block');\r\n    // $('.sp-replacer').removeClass('sp-disabled');\r\n\r\n});\r\n","$(function(){\r\n$('.nav-tabs a').click(function(){\r\n    $(this).tab('show');\r\n});\r\n$('#next').click(function(){\r\n    $('.nav-tabs a[href=\"#template\"]').tab('show');\r\n    $('.nav-tabs a[href=\"#template\"]').parent().addClass('active').siblings().removeClass('active');\r\n});\r\n$('#prev').click(function(){\r\n    $('.nav-tabs a[href=\"#main\"]').tab('show');\r\n})\r\n\r\n// Select tab by name\r\n$('.nav-tabs a[href=\"#main\"]').tab('show');\r\n// $('.nav-tabs a:first').tab('show');\r\n});\r\n"]}